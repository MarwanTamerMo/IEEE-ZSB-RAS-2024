
Test_Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000006fa  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  00000792  2**0
                  ALLOC
  3 .stab         00000c18  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000660  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_10>
  2c:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 03 	call	0x6ce	; 0x6ce <main>
  8a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vidInit>:
#include "DIO_priv.h"



void DIO_vidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	
  DDRA = Conc(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
  DDRB = Conc(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
  DDRC = Conc(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16);
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
  DDRD = Conc(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24);
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24
	
	
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <DIO_enuWritePin>:
/********************************************************/
/*u8PinNumCpy: 0--7 (A)  8--15 (B) 16 --23 (C)24--31 (D)*/
/********************************************************/
tenuErrorSatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValCpy)
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2b 97       	sbiw	r28, 0x0b	; 11
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorSatus  enuErrorLoc = E_OK ;
  d8:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	d8 f5       	brcc	.+118    	; 0x156 <DIO_enuWritePin+0x96>
	{
		// ODRA === PORTA  1101 0000
		switch(u8PinValCpy)
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	3b 87       	std	Y+11, r19	; 0x0b
  e8:	2a 87       	std	Y+10, r18	; 0x0a
  ea:	8a 85       	ldd	r24, Y+10	; 0x0a
  ec:	9b 85       	ldd	r25, Y+11	; 0x0b
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	31 f0       	breq	.+12     	; 0xfe <DIO_enuWritePin+0x3e>
  f2:	2a 85       	ldd	r18, Y+10	; 0x0a
  f4:	3b 85       	ldd	r19, Y+11	; 0x0b
  f6:	21 30       	cpi	r18, 0x01	; 1
  f8:	31 05       	cpc	r19, r1
  fa:	b1 f0       	breq	.+44     	; 0x128 <DIO_enuWritePin+0x68>
  fc:	29 c0       	rjmp	.+82     	; 0x150 <DIO_enuWritePin+0x90>
		{
			case 0:
			   CLR_BIT(ODRA , u8PinNumCpy);
  fe:	ab e3       	ldi	r26, 0x3B	; 59
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	eb e3       	ldi	r30, 0x3B	; 59
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_enuWritePin+0x5c>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_enuWritePin+0x58>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8c 93       	st	X, r24
 126:	eb c0       	rjmp	.+470    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRA , u8PinNumCpy);
 128:	ab e3       	ldi	r26, 0x3B	; 59
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	eb e3       	ldi	r30, 0x3B	; 59
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_enuWritePin+0x86>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_enuWritePin+0x82>
 14a:	84 2b       	or	r24, r20
 14c:	8c 93       	st	X, r24
 14e:	d7 c0       	rjmp	.+430    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	d4 c0       	rjmp	.+424    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
		}
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	08 f4       	brcc	.+2      	; 0x15e <DIO_enuWritePin+0x9e>
 15c:	42 c0       	rjmp	.+132    	; 0x1e2 <DIO_enuWritePin+0x122>
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	08 f0       	brcs	.+2      	; 0x166 <DIO_enuWritePin+0xa6>
 164:	3e c0       	rjmp	.+124    	; 0x1e2 <DIO_enuWritePin+0x122>
	{
		// ODRB === PORTB
		u8PinNumCpy = u8PinNumCpy % 8 ;	
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	87 70       	andi	r24, 0x07	; 7
 16a:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	39 87       	std	Y+9, r19	; 0x09
 174:	28 87       	std	Y+8, r18	; 0x08
 176:	88 85       	ldd	r24, Y+8	; 0x08
 178:	99 85       	ldd	r25, Y+9	; 0x09
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	31 f0       	breq	.+12     	; 0x18a <DIO_enuWritePin+0xca>
 17e:	28 85       	ldd	r18, Y+8	; 0x08
 180:	39 85       	ldd	r19, Y+9	; 0x09
 182:	21 30       	cpi	r18, 0x01	; 1
 184:	31 05       	cpc	r19, r1
 186:	b1 f0       	breq	.+44     	; 0x1b4 <DIO_enuWritePin+0xf4>
 188:	29 c0       	rjmp	.+82     	; 0x1dc <DIO_enuWritePin+0x11c>
		{
			case 0:
			   CLR_BIT(ODRB , u8PinNumCpy);
 18a:	a8 e3       	ldi	r26, 0x38	; 56
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e8 e3       	ldi	r30, 0x38	; 56
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_enuWritePin+0xe8>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_enuWritePin+0xe4>
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	8c 93       	st	X, r24
 1b2:	a5 c0       	rjmp	.+330    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRB , u8PinNumCpy);
 1b4:	a8 e3       	ldi	r26, 0x38	; 56
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e8 e3       	ldi	r30, 0x38	; 56
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	48 2f       	mov	r20, r24
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_enuWritePin+0x112>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_enuWritePin+0x10e>
 1d6:	84 2b       	or	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	91 c0       	rjmp	.+290    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	89 83       	std	Y+1, r24	; 0x01
 1e0:	8e c0       	rjmp	.+284    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
		}
	
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	80 31       	cpi	r24, 0x10	; 16
 1e6:	08 f4       	brcc	.+2      	; 0x1ea <DIO_enuWritePin+0x12a>
 1e8:	42 c0       	rjmp	.+132    	; 0x26e <DIO_enuWritePin+0x1ae>
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	88 31       	cpi	r24, 0x18	; 24
 1ee:	08 f0       	brcs	.+2      	; 0x1f2 <DIO_enuWritePin+0x132>
 1f0:	3e c0       	rjmp	.+124    	; 0x26e <DIO_enuWritePin+0x1ae>
	{
		// ODRC === PORTC
		u8PinNumCpy = u8PinNumCpy %8 ;	
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	87 70       	andi	r24, 0x07	; 7
 1f6:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	3f 83       	std	Y+7, r19	; 0x07
 200:	2e 83       	std	Y+6, r18	; 0x06
 202:	8e 81       	ldd	r24, Y+6	; 0x06
 204:	9f 81       	ldd	r25, Y+7	; 0x07
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	31 f0       	breq	.+12     	; 0x216 <DIO_enuWritePin+0x156>
 20a:	2e 81       	ldd	r18, Y+6	; 0x06
 20c:	3f 81       	ldd	r19, Y+7	; 0x07
 20e:	21 30       	cpi	r18, 0x01	; 1
 210:	31 05       	cpc	r19, r1
 212:	b1 f0       	breq	.+44     	; 0x240 <DIO_enuWritePin+0x180>
 214:	29 c0       	rjmp	.+82     	; 0x268 <DIO_enuWritePin+0x1a8>
		{
			case 0:
			   CLR_BIT(ODRC , u8PinNumCpy);
 216:	a5 e3       	ldi	r26, 0x35	; 53
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e5 e3       	ldi	r30, 0x35	; 53
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_enuWritePin+0x174>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_enuWritePin+0x170>
 238:	80 95       	com	r24
 23a:	84 23       	and	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	5f c0       	rjmp	.+190    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRC , u8PinNumCpy);
 240:	a5 e3       	ldi	r26, 0x35	; 53
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e5 e3       	ldi	r30, 0x35	; 53
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	48 2f       	mov	r20, r24
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_enuWritePin+0x19e>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_enuWritePin+0x19a>
 262:	84 2b       	or	r24, r20
 264:	8c 93       	st	X, r24
 266:	4b c0       	rjmp	.+150    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	48 c0       	rjmp	.+144    	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
		}
	
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	88 31       	cpi	r24, 0x18	; 24
 272:	08 f4       	brcc	.+2      	; 0x276 <DIO_enuWritePin+0x1b6>
 274:	42 c0       	rjmp	.+132    	; 0x2fa <DIO_enuWritePin+0x23a>
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	80 32       	cpi	r24, 0x20	; 32
 27a:	08 f0       	brcs	.+2      	; 0x27e <DIO_enuWritePin+0x1be>
 27c:	3e c0       	rjmp	.+124    	; 0x2fa <DIO_enuWritePin+0x23a>
	{
		// ODRD === PORTD
		u8PinNumCpy = u8PinNumCpy % 8 ;	
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	87 70       	andi	r24, 0x07	; 7
 282:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3d 83       	std	Y+5, r19	; 0x05
 28c:	2c 83       	std	Y+4, r18	; 0x04
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	9d 81       	ldd	r25, Y+5	; 0x05
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	31 f0       	breq	.+12     	; 0x2a2 <DIO_enuWritePin+0x1e2>
 296:	2c 81       	ldd	r18, Y+4	; 0x04
 298:	3d 81       	ldd	r19, Y+5	; 0x05
 29a:	21 30       	cpi	r18, 0x01	; 1
 29c:	31 05       	cpc	r19, r1
 29e:	b1 f0       	breq	.+44     	; 0x2cc <DIO_enuWritePin+0x20c>
 2a0:	29 c0       	rjmp	.+82     	; 0x2f4 <DIO_enuWritePin+0x234>
		{
			case 0:
			   CLR_BIT(ODRD , u8PinNumCpy);
 2a2:	a2 e3       	ldi	r26, 0x32	; 50
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e2 e3       	ldi	r30, 0x32	; 50
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 2e       	mov	r0, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_enuWritePin+0x200>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_enuWritePin+0x1fc>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRD , u8PinNumCpy);
 2cc:	a2 e3       	ldi	r26, 0x32	; 50
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e2 e3       	ldi	r30, 0x32	; 50
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_enuWritePin+0x22a>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_enuWritePin+0x226>
 2ee:	84 2b       	or	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_enuWritePin+0x23e>
		}
	
	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuErrorLoc ;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 300:	2b 96       	adiw	r28, 0x0b	; 11
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	08 95       	ret

00000312 <DIO_enuReadPin>:

tenuErrorSatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValCpy)
{
 312:	df 93       	push	r29
 314:	cf 93       	push	r28
 316:	00 d0       	rcall	.+0      	; 0x318 <DIO_enuReadPin+0x6>
 318:	00 d0       	rcall	.+0      	; 0x31a <DIO_enuReadPin+0x8>
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8a 83       	std	Y+2, r24	; 0x02
 320:	7c 83       	std	Y+4, r23	; 0x04
 322:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorSatus enuErrorLoc = E_OK;
 324:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	a0 f4       	brcc	.+40     	; 0x354 <DIO_enuReadPin+0x42>
	{
		// IDRA
		*pu8PinValCpy = GET_BIT(IDRA , u8PinNumCpy);
 32c:	e9 e3       	ldi	r30, 0x39	; 57
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	88 2f       	mov	r24, r24
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	a9 01       	movw	r20, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_enuReadPin+0x32>
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_enuReadPin+0x2e>
 348:	ca 01       	movw	r24, r20
 34a:	81 70       	andi	r24, 0x01	; 1
 34c:	eb 81       	ldd	r30, Y+3	; 0x03
 34e:	fc 81       	ldd	r31, Y+4	; 0x04
 350:	80 83       	st	Z, r24
 352:	59 c0       	rjmp	.+178    	; 0x406 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	88 30       	cpi	r24, 0x08	; 8
 358:	d0 f0       	brcs	.+52     	; 0x38e <DIO_enuReadPin+0x7c>
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	80 31       	cpi	r24, 0x10	; 16
 35e:	b8 f4       	brcc	.+46     	; 0x38e <DIO_enuReadPin+0x7c>
	{
		// IDRB
		u8PinNumCpy = u8PinNumCpy %8 ;
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	87 70       	andi	r24, 0x07	; 7
 364:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRB , u8PinNumCpy);
 366:	e6 e3       	ldi	r30, 0x36	; 54
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	a9 01       	movw	r20, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_enuReadPin+0x6c>
 37a:	55 95       	asr	r21
 37c:	47 95       	ror	r20
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_enuReadPin+0x68>
 382:	ca 01       	movw	r24, r20
 384:	81 70       	andi	r24, 0x01	; 1
 386:	eb 81       	ldd	r30, Y+3	; 0x03
 388:	fc 81       	ldd	r31, Y+4	; 0x04
 38a:	80 83       	st	Z, r24
 38c:	3c c0       	rjmp	.+120    	; 0x406 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	80 31       	cpi	r24, 0x10	; 16
 392:	d0 f0       	brcs	.+52     	; 0x3c8 <DIO_enuReadPin+0xb6>
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	88 31       	cpi	r24, 0x18	; 24
 398:	b8 f4       	brcc	.+46     	; 0x3c8 <DIO_enuReadPin+0xb6>
	{
		// IDRC
		u8PinNumCpy = u8PinNumCpy %8 ;
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	87 70       	andi	r24, 0x07	; 7
 39e:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRC , u8PinNumCpy);
 3a0:	e3 e3       	ldi	r30, 0x33	; 51
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	a9 01       	movw	r20, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_enuReadPin+0xa6>
 3b4:	55 95       	asr	r21
 3b6:	47 95       	ror	r20
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_enuReadPin+0xa2>
 3bc:	ca 01       	movw	r24, r20
 3be:	81 70       	andi	r24, 0x01	; 1
 3c0:	eb 81       	ldd	r30, Y+3	; 0x03
 3c2:	fc 81       	ldd	r31, Y+4	; 0x04
 3c4:	80 83       	st	Z, r24
 3c6:	1f c0       	rjmp	.+62     	; 0x406 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	88 31       	cpi	r24, 0x18	; 24
 3cc:	d0 f0       	brcs	.+52     	; 0x402 <DIO_enuReadPin+0xf0>
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	80 32       	cpi	r24, 0x20	; 32
 3d2:	b8 f4       	brcc	.+46     	; 0x402 <DIO_enuReadPin+0xf0>
	{
		// IDRD
		u8PinNumCpy = u8PinNumCpy %8 ;
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	87 70       	andi	r24, 0x07	; 7
 3d8:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRD , u8PinNumCpy);
 3da:	e0 e3       	ldi	r30, 0x30	; 48
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_enuReadPin+0xe0>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_enuReadPin+0xdc>
 3f6:	ca 01       	movw	r24, r20
 3f8:	81 70       	andi	r24, 0x01	; 1
 3fa:	eb 81       	ldd	r30, Y+3	; 0x03
 3fc:	fc 81       	ldd	r31, Y+4	; 0x04
 3fe:	80 83       	st	Z, r24
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_enuReadPin+0xf4>
	}
	else 
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuErrorLoc ;
 406:	89 81       	ldd	r24, Y+1	; 0x01
}
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	cf 91       	pop	r28
 412:	df 91       	pop	r29
 414:	08 95       	ret

00000416 <DIO_enuActivPull>:
tenuErrorSatus DIO_enuActivPull(uint8 u8PinNumCpy , uint8 u8ResStatsCpy)
{
 416:	df 93       	push	r29
 418:	cf 93       	push	r28
 41a:	00 d0       	rcall	.+0      	; 0x41c <DIO_enuActivPull+0x6>
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy,u8ResStatsCpy);
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	6a 81       	ldd	r22, Y+2	; 0x02
 428:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_enuWritePin>
}
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	cf 91       	pop	r28
 432:	df 91       	pop	r29
 434:	08 95       	ret

00000436 <GIE_vidEnable>:
#include "GIE.h"

#define SREG  *((volatile uint8 *) 0x5F)

void GIE_vidEnable(void)
{
 436:	df 93       	push	r29
 438:	cf 93       	push	r28
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7 );
 43e:	af e5       	ldi	r26, 0x5F	; 95
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	ef e5       	ldi	r30, 0x5F	; 95
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	80 68       	ori	r24, 0x80	; 128
 44a:	8c 93       	st	X, r24
}
 44c:	cf 91       	pop	r28
 44e:	df 91       	pop	r29
 450:	08 95       	ret

00000452 <GIE_vidDisable>:
void GIE_vidDisable(void)
{
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , 7 );
 45a:	af e5       	ldi	r26, 0x5F	; 95
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	ef e5       	ldi	r30, 0x5F	; 95
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	8c 93       	st	X, r24
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	08 95       	ret

0000046e <TIM0_vidInit>:
#undef TIM0_MODE
#define TIM0_MODE TIM0_NORMAL
#endif

void TIM0_vidInit(void)
{
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	0f 92       	push	r0
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
  uint8 u8Tccr0_pre = 0 ;
 478:	19 82       	std	Y+1, r1	; 0x01

  #if   TIM0_MODE == TIM0_NORMAL
  	  CLR_BIT(u8Tccr0_pre , 6);
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	8f 7b       	andi	r24, 0xBF	; 191
 47e:	89 83       	std	Y+1, r24	; 0x01
  	  CLR_BIT(u8Tccr0_pre , 3);
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	87 7f       	andi	r24, 0xF7	; 247
 484:	89 83       	std	Y+1, r24	; 0x01
  #elif TIM0_MODE == TIM0_FAST_PWM
  	  SET_BIT(u8Tccr0_pre , 6);
  	  SET_BIT(u8Tccr0_pre , 3);

  #endif
  	  u8Tccr0_pre = u8Tccr0_pre | TIM0_CLK_SEL;
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	82 60       	ori	r24, 0x02	; 2
 48a:	89 83       	std	Y+1, r24	; 0x01
  	  u8Tccr0_pre = u8Tccr0_pre | TIM0_COM_BITS<<4;
  	  TCCR0 = u8Tccr0_pre ;
 48c:	e3 e5       	ldi	r30, 0x53	; 83
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	80 83       	st	Z, r24

}
 494:	0f 90       	pop	r0
 496:	cf 91       	pop	r28
 498:	df 91       	pop	r29
 49a:	08 95       	ret

0000049c <TIM0_vidEnableOvfIreq>:

void TIM0_vidEnableOvfIreq(void)
{
 49c:	df 93       	push	r29
 49e:	cf 93       	push	r28
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
 4a4:	a9 e5       	ldi	r26, 0x59	; 89
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	e9 e5       	ldi	r30, 0x59	; 89
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	8c 93       	st	X, r24
}
 4b2:	cf 91       	pop	r28
 4b4:	df 91       	pop	r29
 4b6:	08 95       	ret

000004b8 <TIM0_vidDisableOvfIreq>:
void TIM0_vidDisableOvfIreq(void)
{
 4b8:	df 93       	push	r29
 4ba:	cf 93       	push	r28
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);	
 4c0:	a9 e5       	ldi	r26, 0x59	; 89
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	e9 e5       	ldi	r30, 0x59	; 89
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	8e 7f       	andi	r24, 0xFE	; 254
 4cc:	8c 93       	st	X, r24
}
 4ce:	cf 91       	pop	r28
 4d0:	df 91       	pop	r29
 4d2:	08 95       	ret

000004d4 <TIM0_vidEnableCmpIreq>:

void TIM0_vidEnableCmpIreq(void)
{
 4d4:	df 93       	push	r29
 4d6:	cf 93       	push	r28
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
 4dc:	a9 e5       	ldi	r26, 0x59	; 89
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	e9 e5       	ldi	r30, 0x59	; 89
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	8c 93       	st	X, r24
}
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	08 95       	ret

000004f0 <TIM0_vidDisableCmpIreq>:
void TIM0_vidDisableCmpIreq(void)
{
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
 4f8:	a9 e5       	ldi	r26, 0x59	; 89
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e9 e5       	ldi	r30, 0x59	; 89
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	8d 7f       	andi	r24, 0xFD	; 253
 504:	8c 93       	st	X, r24
}
 506:	cf 91       	pop	r28
 508:	df 91       	pop	r29
 50a:	08 95       	ret

0000050c <TIM0_vidSetCallbackOvf>:

void TIM0_vidSetCallbackOvf(pf pfCallBackCpy)
{
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	00 d0       	rcall	.+0      	; 0x512 <TIM0_vidSetCallbackOvf+0x6>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	9a 83       	std	Y+2, r25	; 0x02
 518:	89 83       	std	Y+1, r24	; 0x01
	TIM0_CallBack_Ovf = pfCallBackCpy ;
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	9a 81       	ldd	r25, Y+2	; 0x02
 51e:	90 93 61 00 	sts	0x0061, r25
 522:	80 93 60 00 	sts	0x0060, r24
}
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	cf 91       	pop	r28
 52c:	df 91       	pop	r29
 52e:	08 95       	ret

00000530 <TIM0_vidSetCallbackCmp>:
void TIM0_vidSetCallbackCmp(pf pfCallBackCpy)
{
 530:	df 93       	push	r29
 532:	cf 93       	push	r28
 534:	00 d0       	rcall	.+0      	; 0x536 <TIM0_vidSetCallbackCmp+0x6>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
	TIM0_CallBack_Cmp = pfCallBackCpy ;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	90 93 63 00 	sts	0x0063, r25
 546:	80 93 62 00 	sts	0x0062, r24
}
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <TIM0_vidSetValueTcnt>:

void TIM0_vidSetValueTcnt(uint8 u8ValueCpy)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	0f 92       	push	r0
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8ValueCpy ;
 560:	e2 e5       	ldi	r30, 0x52	; 82
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	80 83       	st	Z, r24
}
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <TIM0_vidSetValueOcr>:
void TIM0_vidSetValueOcr(uint8 u8ValueCpy)
{
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	0f 92       	push	r0
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8ValueCpy ;
 57c:	ec e5       	ldi	r30, 0x5C	; 92
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	80 83       	st	Z, r24
}
 584:	0f 90       	pop	r0
 586:	cf 91       	pop	r28
 588:	df 91       	pop	r29
 58a:	08 95       	ret

0000058c <TIM0_u8GetValueTcnt>:

uint8 TIM0_u8GetValueTcnt(void)
{
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
 594:	e2 e5       	ldi	r30, 0x52	; 82
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
}
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <__vector_10>:

/*Compare match ISR*/
void __vector_10 (void) __attribute__((signal, used));
void __vector_10 (void)
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
	TIM0_CallBack_Cmp();
 5ca:	e0 91 62 00 	lds	r30, 0x0062
 5ce:	f0 91 63 00 	lds	r31, 0x0063
 5d2:	09 95       	icall
}
 5d4:	cf 91       	pop	r28
 5d6:	df 91       	pop	r29
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	bf 91       	pop	r27
 5de:	af 91       	pop	r26
 5e0:	9f 91       	pop	r25
 5e2:	8f 91       	pop	r24
 5e4:	7f 91       	pop	r23
 5e6:	6f 91       	pop	r22
 5e8:	5f 91       	pop	r21
 5ea:	4f 91       	pop	r20
 5ec:	3f 91       	pop	r19
 5ee:	2f 91       	pop	r18
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__vector_11>:

/*Overflow ISR*/
void __vector_11 (void) __attribute__((signal, used));
void __vector_11 (void)
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
 61c:	df 93       	push	r29
 61e:	cf 93       	push	r28
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	TIM0_CallBack_Ovf();
 624:	e0 91 60 00 	lds	r30, 0x0060
 628:	f0 91 61 00 	lds	r31, 0x0061
 62c:	09 95       	icall
}
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <stub>:

static void stub(void)
{
 654:	df 93       	push	r29
 656:	cf 93       	push	r28
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
	
} 
 65c:	cf 91       	pop	r28
 65e:	df 91       	pop	r29
 660:	08 95       	ret

00000662 <Isr_ovf>:
#include "DIO.h"
#include "GIE.h"
#include "TIM0.h"

void Isr_ovf(void)
{
 662:	df 93       	push	r29
 664:	cf 93       	push	r28
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
	static uint16 ovf = 0;
	static uint8 a0 = 0;

	ovf++;
 66a:	80 91 65 00 	lds	r24, 0x0065
 66e:	90 91 66 00 	lds	r25, 0x0066
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 66 00 	sts	0x0066, r25
 678:	80 93 65 00 	sts	0x0065, r24

	if (ovf == 35)
 67c:	80 91 65 00 	lds	r24, 0x0065
 680:	90 91 66 00 	lds	r25, 0x0066
 684:	83 32       	cpi	r24, 0x23	; 35
 686:	91 05       	cpc	r25, r1
 688:	f9 f4       	brne	.+62     	; 0x6c8 <Isr_ovf+0x66>
	{
		if(a0 == 1)
 68a:	80 91 64 00 	lds	r24, 0x0064
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	29 f4       	brne	.+10     	; 0x69c <Isr_ovf+0x3a>
		{
			DIO_enuWritePin(0, 1);
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_enuWritePin>
 69a:	0a c0       	rjmp	.+20     	; 0x6b0 <Isr_ovf+0x4e>
		}
		else if(a0 == 4)
 69c:	80 91 64 00 	lds	r24, 0x0064
 6a0:	84 30       	cpi	r24, 0x04	; 4
 6a2:	31 f4       	brne	.+12     	; 0x6b0 <Isr_ovf+0x4e>
		{
			DIO_enuWritePin(0, 0);
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_enuWritePin>
			a0 = 0;
 6ac:	10 92 64 00 	sts	0x0064, r1
		}

		a0++;
 6b0:	80 91 64 00 	lds	r24, 0x0064
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	80 93 64 00 	sts	0x0064, r24

		ovf = 0;
 6ba:	10 92 66 00 	sts	0x0066, r1
 6be:	10 92 65 00 	sts	0x0065, r1
		TIM0_vidSetValueTcnt(120);
 6c2:	88 e7       	ldi	r24, 0x78	; 120
 6c4:	0e 94 aa 02 	call	0x554	; 0x554 <TIM0_vidSetValueTcnt>
	}

}
 6c8:	cf 91       	pop	r28
 6ca:	df 91       	pop	r29
 6cc:	08 95       	ret

000006ce <main>:
//	}
//
//}

int main(void)
{
 6ce:	df 93       	push	r29
 6d0:	cf 93       	push	r28
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
 6d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vidInit>
	TIM0_vidInit();
 6da:	0e 94 37 02 	call	0x46e	; 0x46e <TIM0_vidInit>
//	TIM0_vidSetCallbackCmp(Isr_CMP);

//	DIO_enuWritePin(0, 1);
//	DIO_enuWritePin(1, 1);
//	DIO_enuWritePin(2, 1);
	TIM0_vidSetValueTcnt(120);
 6de:	88 e7       	ldi	r24, 0x78	; 120
 6e0:	0e 94 aa 02 	call	0x554	; 0x554 <TIM0_vidSetValueTcnt>
	TIM0_vidSetCallbackOvf(Isr_ovf);
 6e4:	81 e3       	ldi	r24, 0x31	; 49
 6e6:	93 e0       	ldi	r25, 0x03	; 3
 6e8:	0e 94 86 02 	call	0x50c	; 0x50c <TIM0_vidSetCallbackOvf>
//	TIM0_vidEnableCmpIreq();
	TIM0_vidEnableOvfIreq();
 6ec:	0e 94 4e 02 	call	0x49c	; 0x49c <TIM0_vidEnableOvfIreq>
	GIE_vidEnable();
 6f0:	0e 94 1b 02 	call	0x436	; 0x436 <GIE_vidEnable>
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <main+0x26>

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
