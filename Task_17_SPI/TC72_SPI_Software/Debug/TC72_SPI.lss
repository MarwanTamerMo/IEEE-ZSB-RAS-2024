
TC72_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002726  000027ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007e  0080007e  000027d8  2**0
                  ALLOC
  3 .stab         00001fb0  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001080  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000085ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000939c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000094fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009789  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 12 	call	0x2554	; 0x2554 <main>
      8a:	0c 94 91 13 	jmp	0x2722	; 0x2722 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vidInit>:
#include "DIO_cnfg.h"
#include "DIO_priv.h"


void DIO_vidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

  DDRA = Conc(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ec       	ldi	r24, 0xCF	; 207
     b54:	80 83       	st	Z, r24
  DDRB = Conc(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ea       	ldi	r24, 0xAF	; 175
     b5c:	80 83       	st	Z, r24
  DDRC = Conc(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
  DDRD = Conc(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8b ef       	ldi	r24, 0xFB	; 251
     b6c:	80 83       	st	Z, r24


}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enumWritePin>:
/********************************************************/
/*u8PinNumCpy: 0--7 (A)  8--15 (B) 16 --23 (C)24--31 (D)*/
/********************************************************/
tenuErrorStatus DIO_enumWritePin(uint8 u8PinNumCpy , uint8 u8PinValCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2b 97       	sbiw	r28, 0x0b	; 11
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuErrorLoc = E_OK ;
     b8c:	19 82       	std	Y+1, r1	; 0x01

	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	d8 f5       	brcc	.+118    	; 0xc0a <DIO_enumWritePin+0x96>
	{
		// ODRA === PORTA  1101 0000
		switch(u8PinValCpy)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <DIO_enumWritePin+0x3e>
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	b1 f0       	breq	.+44     	; 0xbdc <DIO_enumWritePin+0x68>
     bb0:	29 c0       	rjmp	.+82     	; 0xc04 <DIO_enumWritePin+0x90>
		{
			case 0:
			   CLEAR_BIT(ODRA , u8PinNumCpy);
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_enumWritePin+0x5c>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_enumWritePin+0x58>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	eb c0       	rjmp	.+470    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRA , u8PinNumCpy);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_enumWritePin+0x86>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_enumWritePin+0x82>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	d7 c0       	rjmp	.+430    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	d4 c0       	rjmp	.+424    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 30       	cpi	r24, 0x08	; 8
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <DIO_enumWritePin+0x9e>
     c10:	42 c0       	rjmp	.+132    	; 0xc96 <DIO_enumWritePin+0x122>
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	08 f0       	brcs	.+2      	; 0xc1a <DIO_enumWritePin+0xa6>
     c18:	3e c0       	rjmp	.+124    	; 0xc96 <DIO_enumWritePin+0x122>
	{
		// ODRB === PORTB
		u8PinNumCpy = u8PinNumCpy % 8;
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	39 87       	std	Y+9, r19	; 0x09
     c28:	28 87       	std	Y+8, r18	; 0x08
     c2a:	88 85       	ldd	r24, Y+8	; 0x08
     c2c:	99 85       	ldd	r25, Y+9	; 0x09
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	31 f0       	breq	.+12     	; 0xc3e <DIO_enumWritePin+0xca>
     c32:	28 85       	ldd	r18, Y+8	; 0x08
     c34:	39 85       	ldd	r19, Y+9	; 0x09
     c36:	21 30       	cpi	r18, 0x01	; 1
     c38:	31 05       	cpc	r19, r1
     c3a:	b1 f0       	breq	.+44     	; 0xc68 <DIO_enumWritePin+0xf4>
     c3c:	29 c0       	rjmp	.+82     	; 0xc90 <DIO_enumWritePin+0x11c>
		{
			case 0:
			   CLEAR_BIT(ODRB , u8PinNumCpy);
     c3e:	a8 e3       	ldi	r26, 0x38	; 56
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e8 e3       	ldi	r30, 0x38	; 56
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_enumWritePin+0xe8>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_enumWritePin+0xe4>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	a5 c0       	rjmp	.+330    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRB , u8PinNumCpy);
     c68:	a8 e3       	ldi	r26, 0x38	; 56
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e3       	ldi	r30, 0x38	; 56
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_enumWritePin+0x112>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_enumWritePin+0x10e>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
     c8e:	91 c0       	rjmp	.+290    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	8e c0       	rjmp	.+284    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}

	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	80 31       	cpi	r24, 0x10	; 16
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <DIO_enumWritePin+0x12a>
     c9c:	42 c0       	rjmp	.+132    	; 0xd22 <DIO_enumWritePin+0x1ae>
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	88 31       	cpi	r24, 0x18	; 24
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <DIO_enumWritePin+0x132>
     ca4:	3e c0       	rjmp	.+124    	; 0xd22 <DIO_enumWritePin+0x1ae>
	{
		// ODRC === PORTC
		u8PinNumCpy = u8PinNumCpy %8 ;
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	87 70       	andi	r24, 0x07	; 7
     caa:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3f 83       	std	Y+7, r19	; 0x07
     cb4:	2e 83       	std	Y+6, r18	; 0x06
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <DIO_enumWritePin+0x156>
     cbe:	2e 81       	ldd	r18, Y+6	; 0x06
     cc0:	3f 81       	ldd	r19, Y+7	; 0x07
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	b1 f0       	breq	.+44     	; 0xcf4 <DIO_enumWritePin+0x180>
     cc8:	29 c0       	rjmp	.+82     	; 0xd1c <DIO_enumWritePin+0x1a8>
		{
			case 0:
			   CLEAR_BIT(ODRC , u8PinNumCpy);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_enumWritePin+0x174>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_enumWritePin+0x170>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	5f c0       	rjmp	.+190    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRC , u8PinNumCpy);
     cf4:	a5 e3       	ldi	r26, 0x35	; 53
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e5 e3       	ldi	r30, 0x35	; 53
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_enumWritePin+0x19e>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_enumWritePin+0x19a>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	4b c0       	rjmp	.+150    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	48 c0       	rjmp	.+144    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}

	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	88 31       	cpi	r24, 0x18	; 24
     d26:	08 f4       	brcc	.+2      	; 0xd2a <DIO_enumWritePin+0x1b6>
     d28:	42 c0       	rjmp	.+132    	; 0xdae <DIO_enumWritePin+0x23a>
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	80 32       	cpi	r24, 0x20	; 32
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <DIO_enumWritePin+0x1be>
     d30:	3e c0       	rjmp	.+124    	; 0xdae <DIO_enumWritePin+0x23a>
	{
		// ODRD === PORTD
		u8PinNumCpy = u8PinNumCpy % 8 ;
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2c 83       	std	Y+4, r18	; 0x04
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <DIO_enumWritePin+0x1e2>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	b1 f0       	breq	.+44     	; 0xd80 <DIO_enumWritePin+0x20c>
     d54:	29 c0       	rjmp	.+82     	; 0xda8 <DIO_enumWritePin+0x234>
		{
			case 0:
			   CLEAR_BIT(ODRD , u8PinNumCpy);
     d56:	a2 e3       	ldi	r26, 0x32	; 50
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e2 e3       	ldi	r30, 0x32	; 50
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_enumWritePin+0x200>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_enumWritePin+0x1fc>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	19 c0       	rjmp	.+50     	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRD , u8PinNumCpy);
     d80:	a2 e3       	ldi	r26, 0x32	; 50
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e3       	ldi	r30, 0x32	; 50
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_enumWritePin+0x22a>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_enumWritePin+0x226>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_enumWritePin+0x23e>
		}

	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE;
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorLoc ;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
}
     db4:	2b 96       	adiw	r28, 0x0b	; 11
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <DIO_enumReadPin>:

tenuErrorStatus DIO_enumReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValCpy)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <DIO_enumReadPin+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_enumReadPin+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	7c 83       	std	Y+4, r23	; 0x04
     dd6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorLoc = E_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01

	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	a0 f4       	brcc	.+40     	; 0xe08 <DIO_enumReadPin+0x42>
	{
		// IDRA
		*pu8PinValCpy = GET_BIT(IDRA , u8PinNumCpy);
     de0:	e9 e3       	ldi	r30, 0x39	; 57
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_enumReadPin+0x32>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_enumReadPin+0x2e>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	80 83       	st	Z, r24
     e06:	59 c0       	rjmp	.+178    	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	d0 f0       	brcs	.+52     	; 0xe42 <DIO_enumReadPin+0x7c>
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 31       	cpi	r24, 0x10	; 16
     e12:	b8 f4       	brcc	.+46     	; 0xe42 <DIO_enumReadPin+0x7c>
	{
		// IDRB
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	87 70       	andi	r24, 0x07	; 7
     e18:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRB , u8PinNumCpy);
     e1a:	e6 e3       	ldi	r30, 0x36	; 54
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_enumReadPin+0x6c>
     e2e:	55 95       	asr	r21
     e30:	47 95       	ror	r20
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_enumReadPin+0x68>
     e36:	ca 01       	movw	r24, r20
     e38:	81 70       	andi	r24, 0x01	; 1
     e3a:	eb 81       	ldd	r30, Y+3	; 0x03
     e3c:	fc 81       	ldd	r31, Y+4	; 0x04
     e3e:	80 83       	st	Z, r24
     e40:	3c c0       	rjmp	.+120    	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	80 31       	cpi	r24, 0x10	; 16
     e46:	d0 f0       	brcs	.+52     	; 0xe7c <DIO_enumReadPin+0xb6>
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 31       	cpi	r24, 0x18	; 24
     e4c:	b8 f4       	brcc	.+46     	; 0xe7c <DIO_enumReadPin+0xb6>
	{
		// IDRC
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	87 70       	andi	r24, 0x07	; 7
     e52:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRC , u8PinNumCpy);
     e54:	e3 e3       	ldi	r30, 0x33	; 51
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a9 01       	movw	r20, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enumReadPin+0xa6>
     e68:	55 95       	asr	r21
     e6a:	47 95       	ror	r20
     e6c:	8a 95       	dec	r24
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_enumReadPin+0xa2>
     e70:	ca 01       	movw	r24, r20
     e72:	81 70       	andi	r24, 0x01	; 1
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	80 83       	st	Z, r24
     e7a:	1f c0       	rjmp	.+62     	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 31       	cpi	r24, 0x18	; 24
     e80:	d0 f0       	brcs	.+52     	; 0xeb6 <DIO_enumReadPin+0xf0>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 32       	cpi	r24, 0x20	; 32
     e86:	b8 f4       	brcc	.+46     	; 0xeb6 <DIO_enumReadPin+0xf0>
	{
		// IDRD
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRD , u8PinNumCpy);
     e8e:	e0 e3       	ldi	r30, 0x30	; 48
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_enumReadPin+0xe0>
     ea2:	55 95       	asr	r21
     ea4:	47 95       	ror	r20
     ea6:	8a 95       	dec	r24
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_enumReadPin+0xdc>
     eaa:	ca 01       	movw	r24, r20
     eac:	81 70       	andi	r24, 0x01	; 1
     eae:	eb 81       	ldd	r30, Y+3	; 0x03
     eb0:	fc 81       	ldd	r31, Y+4	; 0x04
     eb2:	80 83       	st	Z, r24
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorLoc ;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_enuActivePullUp>:

tenuErrorStatus DIO_enuActivePullUp(uint8 u8pinNumCpy, uint8 u8ResStatusCpy)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_enuActivePullUp+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enumWritePin(u8pinNumCpy, u8ResStatusCpy);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	6a 81       	ldd	r22, Y+2	; 0x02
     edc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <LCD_vidInit>:
static void WriteHelper(uint8 u8StartPin, uint8 u8lcdIndxCpy, uint8 u8DataorCmdCpy);

uint8 LCD_u84BitModFlg = 0;

void LCD_vidInit()
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	c0 58       	subi	r28, 0x80	; 128
     ef8:	d0 40       	sbci	r29, 0x00	; 0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CmdLoc;
	uint8 u8CntrLoc = 0;
     f04:	fe 01       	movw	r30, r28
     f06:	e1 58       	subi	r30, 0x81	; 129
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	10 82       	st	Z, r1

	for(u8CntrLoc = 0 ;u8CntrLoc< LCD_MAX_NUM ; u8CntrLoc++)
     f0c:	fe 01       	movw	r30, r28
     f0e:	e1 58       	subi	r30, 0x81	; 129
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	10 82       	st	Z, r1
     f14:	4a c7       	rjmp	.+3732   	; 0x1daa <LCD_vidInit+0xec0>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdExtCnfg.Concmode == LCD_8BIT_MODE)
     f16:	fe 01       	movw	r30, r28
     f18:	e1 58       	subi	r30, 0x81	; 129
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	ef 58       	subi	r30, 0x8F	; 143
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <LCD_vidInit+0x5c>
     f44:	52 c4       	rjmp	.+2212   	; 0x17ea <LCD_vidInit+0x900>
     f46:	fe 01       	movw	r30, r28
     f48:	e5 58       	subi	r30, 0x85	; 133
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 ef       	ldi	r26, 0xF0	; 240
     f52:	b1 e4       	ldi	r27, 0x41	; 65
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	8e 01       	movw	r16, r28
     f5e:	09 58       	subi	r16, 0x89	; 137
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	e5 58       	subi	r30, 0x85	; 133
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e7       	ldi	r20, 0x7A	; 122
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e9 58       	subi	r30, 0x89	; 137
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	44 f4       	brge	.+16     	; 0xfb8 <LCD_vidInit+0xce>
		__ticks = 1;
     fa8:	fe 01       	movw	r30, r28
     faa:	eb 58       	subi	r30, 0x8B	; 139
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
     fb6:	64 c0       	rjmp	.+200    	; 0x1080 <LCD_vidInit+0x196>
	else if (__tmp > 65535)
     fb8:	fe 01       	movw	r30, r28
     fba:	e9 58       	subi	r30, 0x89	; 137
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <LCD_vidInit+0xee>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <LCD_vidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	fe 01       	movw	r30, r28
     fda:	e5 58       	subi	r30, 0x85	; 133
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	8e 01       	movw	r16, r28
     ff8:	0b 58       	subi	r16, 0x8B	; 139
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	1f c0       	rjmp	.+62     	; 0x104e <LCD_vidInit+0x164>
    1010:	fe 01       	movw	r30, r28
    1012:	ed 58       	subi	r30, 0x8D	; 141
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	89 e1       	ldi	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101e:	fe 01       	movw	r30, r28
    1020:	ed 58       	subi	r30, 0x8D	; 141
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_vidInit+0x13e>
    102c:	fe 01       	movw	r30, r28
    102e:	ed 58       	subi	r30, 0x8D	; 141
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	de 01       	movw	r26, r28
    1038:	ab 58       	subi	r26, 0x8B	; 139
    103a:	bf 4f       	sbci	r27, 0xFF	; 255
    103c:	fe 01       	movw	r30, r28
    103e:	eb 58       	subi	r30, 0x8B	; 139
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 93       	st	X, r25
    104c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	fe 01       	movw	r30, r28
    1050:	eb 58       	subi	r30, 0x8B	; 139
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	d1 f6       	brne	.-76     	; 0x1010 <LCD_vidInit+0x126>
    105c:	27 c0       	rjmp	.+78     	; 0x10ac <LCD_vidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	8e 01       	movw	r16, r28
    1060:	0b 58       	subi	r16, 0x8B	; 139
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	fe 01       	movw	r30, r28
    1066:	e9 58       	subi	r30, 0x89	; 137
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    1080:	de 01       	movw	r26, r28
    1082:	af 58       	subi	r26, 0x8F	; 143
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	fe 01       	movw	r30, r28
    1088:	eb 58       	subi	r30, 0x8B	; 139
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	8d 93       	st	X+, r24
    1092:	9c 93       	st	X, r25
    1094:	fe 01       	movw	r30, r28
    1096:	ef 58       	subi	r30, 0x8F	; 143
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <LCD_vidInit+0x1b4>
    10a2:	fe 01       	movw	r30, r28
    10a4:	ef 58       	subi	r30, 0x8F	; 143
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
		{
			_delay_ms(30);

			u8CmdLoc = 0b00110000|
    10ac:	fe 01       	movw	r30, r28
    10ae:	e1 58       	subi	r30, 0x81	; 129
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	c9 01       	movw	r24, r18
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	fc 01       	movw	r30, r24
    10d0:	e3 58       	subi	r30, 0x83	; 131
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	48 2f       	mov	r20, r24
    10ea:	40 63       	ori	r20, 0x30	; 48
    10ec:	fe 01       	movw	r30, r28
    10ee:	e1 58       	subi	r30, 0x81	; 129
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	c9 01       	movw	r24, r18
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	fc 01       	movw	r30, r24
    1110:	e3 58       	subi	r30, 0x83	; 131
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	86 95       	lsr	r24
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	84 2b       	or	r24, r20
    1128:	fe 01       	movw	r30, r28
    112a:	e0 58       	subi	r30, 0x80	; 128
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.N_Line)<<3|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Font)<<2;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1130:	fe 01       	movw	r30, r28
    1132:	e1 58       	subi	r30, 0x81	; 129
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	de 01       	movw	r26, r28
    1138:	a0 58       	subi	r26, 0x80	; 128
    113a:	bf 4f       	sbci	r27, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	6c 91       	ld	r22, X
    1140:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    1144:	fe 01       	movw	r30, r28
    1146:	e3 59       	subi	r30, 0x93	; 147
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e8       	ldi	r26, 0x80	; 128
    1150:	bf e3       	ldi	r27, 0x3F	; 63
    1152:	80 83       	st	Z, r24
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	a2 83       	std	Z+2, r26	; 0x02
    1158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	8e 01       	movw	r16, r28
    115c:	07 59       	subi	r16, 0x97	; 151
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	fe 01       	movw	r30, r28
    1162:	e3 59       	subi	r30, 0x93	; 147
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a e7       	ldi	r20, 0x7A	; 122
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	f8 01       	movw	r30, r16
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
    1186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1188:	fe 01       	movw	r30, r28
    118a:	e7 59       	subi	r30, 0x97	; 151
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	44 f4       	brge	.+16     	; 0x11b6 <LCD_vidInit+0x2cc>
		__ticks = 1;
    11a6:	fe 01       	movw	r30, r28
    11a8:	e9 59       	subi	r30, 0x99	; 153
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
    11b4:	64 c0       	rjmp	.+200    	; 0x127e <LCD_vidInit+0x394>
	else if (__tmp > 65535)
    11b6:	fe 01       	movw	r30, r28
    11b8:	e7 59       	subi	r30, 0x97	; 151
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	0c f0       	brlt	.+2      	; 0x11d6 <LCD_vidInit+0x2ec>
    11d4:	43 c0       	rjmp	.+134    	; 0x125c <LCD_vidInit+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d6:	fe 01       	movw	r30, r28
    11d8:	e3 59       	subi	r30, 0x93	; 147
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8e 01       	movw	r16, r28
    11f6:	09 59       	subi	r16, 0x99	; 153
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	f8 01       	movw	r30, r16
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	1f c0       	rjmp	.+62     	; 0x124c <LCD_vidInit+0x362>
    120e:	fe 01       	movw	r30, r28
    1210:	eb 59       	subi	r30, 0x9B	; 155
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	89 e1       	ldi	r24, 0x19	; 25
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    121c:	fe 01       	movw	r30, r28
    121e:	eb 59       	subi	r30, 0x9B	; 155
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <LCD_vidInit+0x33c>
    122a:	fe 01       	movw	r30, r28
    122c:	eb 59       	subi	r30, 0x9B	; 155
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	de 01       	movw	r26, r28
    1236:	a9 59       	subi	r26, 0x99	; 153
    1238:	bf 4f       	sbci	r27, 0xFF	; 255
    123a:	fe 01       	movw	r30, r28
    123c:	e9 59       	subi	r30, 0x99	; 153
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	9c 93       	st	X, r25
    124a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	fe 01       	movw	r30, r28
    124e:	e9 59       	subi	r30, 0x99	; 153
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	d1 f6       	brne	.-76     	; 0x120e <LCD_vidInit+0x324>
    125a:	27 c0       	rjmp	.+78     	; 0x12aa <LCD_vidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125c:	8e 01       	movw	r16, r28
    125e:	09 59       	subi	r16, 0x99	; 153
    1260:	1f 4f       	sbci	r17, 0xFF	; 255
    1262:	fe 01       	movw	r30, r28
    1264:	e7 59       	subi	r30, 0x97	; 151
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	f8 01       	movw	r30, r16
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
    127e:	de 01       	movw	r26, r28
    1280:	ad 59       	subi	r26, 0x9D	; 157
    1282:	bf 4f       	sbci	r27, 0xFF	; 255
    1284:	fe 01       	movw	r30, r28
    1286:	e9 59       	subi	r30, 0x99	; 153
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	8d 93       	st	X+, r24
    1290:	9c 93       	st	X, r25
    1292:	fe 01       	movw	r30, r28
    1294:	ed 59       	subi	r30, 0x9D	; 157
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCD_vidInit+0x3b2>
    12a0:	fe 01       	movw	r30, r28
    12a2:	ed 59       	subi	r30, 0x9D	; 157
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24

			_delay_ms(1);

			u8CmdLoc = 0b00001000|
    12aa:	fe 01       	movw	r30, r28
    12ac:	e1 58       	subi	r30, 0x81	; 129
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 81       	ld	r24, Z
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	c9 01       	movw	r24, r18
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	fc 01       	movw	r30, r24
    12ce:	e3 58       	subi	r30, 0x83	; 131
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	80 81       	ld	r24, Z
    12d4:	86 95       	lsr	r24
    12d6:	86 95       	lsr	r24
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	48 2f       	mov	r20, r24
    12e8:	48 60       	ori	r20, 0x08	; 8
    12ea:	fe 01       	movw	r30, r28
    12ec:	e1 58       	subi	r30, 0x81	; 129
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	c9 01       	movw	r24, r18
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	e3 58       	subi	r30, 0x83	; 131
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 81       	ld	r24, Z
    1314:	86 95       	lsr	r24
    1316:	86 95       	lsr	r24
    1318:	86 95       	lsr	r24
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	48 2b       	or	r20, r24
    1326:	fe 01       	movw	r30, r28
    1328:	e1 58       	subi	r30, 0x81	; 129
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	fc 01       	movw	r30, r24
    134a:	e3 58       	subi	r30, 0x83	; 131
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	82 95       	swap	r24
    1352:	8f 70       	andi	r24, 0x0F	; 15
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	84 2b       	or	r24, r20
    1358:	fe 01       	movw	r30, r28
    135a:	e0 58       	subi	r30, 0x80	; 128
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Display)<<2|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Cursor)<<1 |
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.C_Blink);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1360:	fe 01       	movw	r30, r28
    1362:	e1 58       	subi	r30, 0x81	; 129
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	de 01       	movw	r26, r28
    1368:	a0 58       	subi	r26, 0x80	; 128
    136a:	bf 4f       	sbci	r27, 0xFF	; 255
    136c:	80 81       	ld	r24, Z
    136e:	6c 91       	ld	r22, X
    1370:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    1374:	fe 01       	movw	r30, r28
    1376:	e1 5a       	subi	r30, 0xA1	; 161
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e8       	ldi	r26, 0x80	; 128
    1380:	bf e3       	ldi	r27, 0x3F	; 63
    1382:	80 83       	st	Z, r24
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	a2 83       	std	Z+2, r26	; 0x02
    1388:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	8e 01       	movw	r16, r28
    138c:	05 5a       	subi	r16, 0xA5	; 165
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	fe 01       	movw	r30, r28
    1392:	e1 5a       	subi	r30, 0xA1	; 161
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	f8 01       	movw	r30, r16
    13b0:	80 83       	st	Z, r24
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	a2 83       	std	Z+2, r26	; 0x02
    13b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13b8:	fe 01       	movw	r30, r28
    13ba:	e5 5a       	subi	r30, 0xA5	; 165
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	44 f4       	brge	.+16     	; 0x13e6 <LCD_vidInit+0x4fc>
		__ticks = 1;
    13d6:	fe 01       	movw	r30, r28
    13d8:	e7 5a       	subi	r30, 0xA7	; 167
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	64 c0       	rjmp	.+200    	; 0x14ae <LCD_vidInit+0x5c4>
	else if (__tmp > 65535)
    13e6:	fe 01       	movw	r30, r28
    13e8:	e5 5a       	subi	r30, 0xA5	; 165
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	0c f0       	brlt	.+2      	; 0x1406 <LCD_vidInit+0x51c>
    1404:	43 c0       	rjmp	.+134    	; 0x148c <LCD_vidInit+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	fe 01       	movw	r30, r28
    1408:	e1 5a       	subi	r30, 0xA1	; 161
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8e 01       	movw	r16, r28
    1426:	07 5a       	subi	r16, 0xA7	; 167
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	f8 01       	movw	r30, r16
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	1f c0       	rjmp	.+62     	; 0x147c <LCD_vidInit+0x592>
    143e:	fe 01       	movw	r30, r28
    1440:	e9 5a       	subi	r30, 0xA9	; 169
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	89 e1       	ldi	r24, 0x19	; 25
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	fe 01       	movw	r30, r28
    144e:	e9 5a       	subi	r30, 0xA9	; 169
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_vidInit+0x56c>
    145a:	fe 01       	movw	r30, r28
    145c:	e9 5a       	subi	r30, 0xA9	; 169
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	de 01       	movw	r26, r28
    1466:	a7 5a       	subi	r26, 0xA7	; 167
    1468:	bf 4f       	sbci	r27, 0xFF	; 255
    146a:	fe 01       	movw	r30, r28
    146c:	e7 5a       	subi	r30, 0xA7	; 167
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	9c 93       	st	X, r25
    147a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147c:	fe 01       	movw	r30, r28
    147e:	e7 5a       	subi	r30, 0xA7	; 167
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	d1 f6       	brne	.-76     	; 0x143e <LCD_vidInit+0x554>
    148a:	27 c0       	rjmp	.+78     	; 0x14da <LCD_vidInit+0x5f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148c:	8e 01       	movw	r16, r28
    148e:	07 5a       	subi	r16, 0xA7	; 167
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	fe 01       	movw	r30, r28
    1494:	e5 5a       	subi	r30, 0xA5	; 165
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	de 01       	movw	r26, r28
    14b0:	ab 5a       	subi	r26, 0xAB	; 171
    14b2:	bf 4f       	sbci	r27, 0xFF	; 255
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 5a       	subi	r30, 0xA7	; 167
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	8d 93       	st	X+, r24
    14c0:	9c 93       	st	X, r25
    14c2:	fe 01       	movw	r30, r28
    14c4:	eb 5a       	subi	r30, 0xAB	; 171
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <LCD_vidInit+0x5e2>
    14d0:	fe 01       	movw	r30, r28
    14d2:	eb 5a       	subi	r30, 0xAB	; 171
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24

			_delay_ms(1);

			LCD_vidSendCmd(u8CntrLoc , 0x01);
    14da:	fe 01       	movw	r30, r28
    14dc:	e1 58       	subi	r30, 0x81	; 129
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    14e8:	fe 01       	movw	r30, r28
    14ea:	ef 5a       	subi	r30, 0xAF	; 175
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	b0 e4       	ldi	r27, 0x40	; 64
    14f6:	80 83       	st	Z, r24
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	a2 83       	std	Z+2, r26	; 0x02
    14fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	8e 01       	movw	r16, r28
    1500:	03 5b       	subi	r16, 0xB3	; 179
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	fe 01       	movw	r30, r28
    1506:	ef 5a       	subi	r30, 0xAF	; 175
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4a e7       	ldi	r20, 0x7A	; 122
    1518:	53 e4       	ldi	r21, 0x43	; 67
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	f8 01       	movw	r30, r16
    1524:	80 83       	st	Z, r24
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	a2 83       	std	Z+2, r26	; 0x02
    152a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    152c:	fe 01       	movw	r30, r28
    152e:	e3 5b       	subi	r30, 0xB3	; 179
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	44 f4       	brge	.+16     	; 0x155a <LCD_vidInit+0x670>
		__ticks = 1;
    154a:	fe 01       	movw	r30, r28
    154c:	e5 5b       	subi	r30, 0xB5	; 181
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	80 83       	st	Z, r24
    1558:	64 c0       	rjmp	.+200    	; 0x1622 <LCD_vidInit+0x738>
	else if (__tmp > 65535)
    155a:	fe 01       	movw	r30, r28
    155c:	e3 5b       	subi	r30, 0xB3	; 179
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	0c f0       	brlt	.+2      	; 0x157a <LCD_vidInit+0x690>
    1578:	43 c0       	rjmp	.+134    	; 0x1600 <LCD_vidInit+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	fe 01       	movw	r30, r28
    157c:	ef 5a       	subi	r30, 0xAF	; 175
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8e 01       	movw	r16, r28
    159a:	05 5b       	subi	r16, 0xB5	; 181
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	f8 01       	movw	r30, r16
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <LCD_vidInit+0x706>
    15b2:	fe 01       	movw	r30, r28
    15b4:	e7 5b       	subi	r30, 0xB7	; 183
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	89 e1       	ldi	r24, 0x19	; 25
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
    15c0:	fe 01       	movw	r30, r28
    15c2:	e7 5b       	subi	r30, 0xB7	; 183
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_vidInit+0x6e0>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e7 5b       	subi	r30, 0xB7	; 183
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	de 01       	movw	r26, r28
    15da:	a5 5b       	subi	r26, 0xB5	; 181
    15dc:	bf 4f       	sbci	r27, 0xFF	; 255
    15de:	fe 01       	movw	r30, r28
    15e0:	e5 5b       	subi	r30, 0xB5	; 181
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	9c 93       	st	X, r25
    15ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f0:	fe 01       	movw	r30, r28
    15f2:	e5 5b       	subi	r30, 0xB5	; 181
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	d1 f6       	brne	.-76     	; 0x15b2 <LCD_vidInit+0x6c8>
    15fe:	27 c0       	rjmp	.+78     	; 0x164e <LCD_vidInit+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	8e 01       	movw	r16, r28
    1602:	05 5b       	subi	r16, 0xB5	; 181
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	e3 5b       	subi	r30, 0xB3	; 179
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	f8 01       	movw	r30, r16
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	80 83       	st	Z, r24
    1622:	de 01       	movw	r26, r28
    1624:	a9 5b       	subi	r26, 0xB9	; 185
    1626:	bf 4f       	sbci	r27, 0xFF	; 255
    1628:	fe 01       	movw	r30, r28
    162a:	e5 5b       	subi	r30, 0xB5	; 181
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	8d 93       	st	X+, r24
    1634:	9c 93       	st	X, r25
    1636:	fe 01       	movw	r30, r28
    1638:	e9 5b       	subi	r30, 0xB9	; 185
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_vidInit+0x756>
    1644:	fe 01       	movw	r30, r28
    1646:	e9 5b       	subi	r30, 0xB9	; 185
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24

			_delay_ms(2);

			u8CmdLoc = 0b00000100|
    164e:	fe 01       	movw	r30, r28
    1650:	e1 58       	subi	r30, 0x81	; 129
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	c9 01       	movw	r24, r18
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	82 0f       	add	r24, r18
    1662:	93 1f       	adc	r25, r19
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	82 0f       	add	r24, r18
    166e:	93 1f       	adc	r25, r19
    1670:	fc 01       	movw	r30, r24
    1672:	e3 58       	subi	r30, 0x83	; 131
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	82 95       	swap	r24
    167a:	86 95       	lsr	r24
    167c:	87 70       	andi	r24, 0x07	; 7
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	48 2f       	mov	r20, r24
    168a:	44 60       	ori	r20, 0x04	; 4
    168c:	fe 01       	movw	r30, r28
    168e:	e1 58       	subi	r30, 0x81	; 129
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	c9 01       	movw	r24, r18
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	82 0f       	add	r24, r18
    16ac:	93 1f       	adc	r25, r19
    16ae:	fc 01       	movw	r30, r24
    16b0:	e3 58       	subi	r30, 0x83	; 131
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	82 95       	swap	r24
    16b8:	86 95       	lsr	r24
    16ba:	86 95       	lsr	r24
    16bc:	83 70       	andi	r24, 0x03	; 3
    16be:	81 70       	andi	r24, 0x01	; 1
    16c0:	84 2b       	or	r24, r20
    16c2:	fe 01       	movw	r30, r28
    16c4:	e0 58       	subi	r30, 0x80	; 128
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.EntryMode)<<1|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Shift);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    16ca:	fe 01       	movw	r30, r28
    16cc:	e1 58       	subi	r30, 0x81	; 129
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	de 01       	movw	r26, r28
    16d2:	a0 58       	subi	r26, 0x80	; 128
    16d4:	bf 4f       	sbci	r27, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	6c 91       	ld	r22, X
    16da:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    16de:	fe 01       	movw	r30, r28
    16e0:	ed 5b       	subi	r30, 0xBD	; 189
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e8       	ldi	r26, 0x80	; 128
    16ea:	bf e3       	ldi	r27, 0x3F	; 63
    16ec:	80 83       	st	Z, r24
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	a2 83       	std	Z+2, r26	; 0x02
    16f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	8e 01       	movw	r16, r28
    16f6:	01 5c       	subi	r16, 0xC1	; 193
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	fe 01       	movw	r30, r28
    16fc:	ed 5b       	subi	r30, 0xBD	; 189
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	f8 01       	movw	r30, r16
    171a:	80 83       	st	Z, r24
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	a2 83       	std	Z+2, r26	; 0x02
    1720:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1722:	fe 01       	movw	r30, r28
    1724:	ff 96       	adiw	r30, 0x3f	; 63
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <LCD_vidInit+0x85e>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9e af       	std	Y+62, r25	; 0x3e
    1744:	8d af       	std	Y+61, r24	; 0x3d
    1746:	46 c0       	rjmp	.+140    	; 0x17d4 <LCD_vidInit+0x8ea>
	else if (__tmp > 65535)
    1748:	fe 01       	movw	r30, r28
    174a:	ff 96       	adiw	r30, 0x3f	; 63
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	64 f5       	brge	.+88     	; 0x17bc <LCD_vidInit+0x8d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	fe 01       	movw	r30, r28
    1766:	ed 5b       	subi	r30, 0xBD	; 189
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e af       	std	Y+62, r25	; 0x3e
    1790:	8d af       	std	Y+61, r24	; 0x3d
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <LCD_vidInit+0x8c8>
    1794:	89 e1       	ldi	r24, 0x19	; 25
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c af       	std	Y+60, r25	; 0x3c
    179a:	8b af       	std	Y+59, r24	; 0x3b
    179c:	8b ad       	ldd	r24, Y+59	; 0x3b
    179e:	9c ad       	ldd	r25, Y+60	; 0x3c
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_vidInit+0x8b6>
    17a4:	9c af       	std	Y+60, r25	; 0x3c
    17a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9e af       	std	Y+62, r25	; 0x3e
    17b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <LCD_vidInit+0x8aa>
    17ba:	ee c2       	rjmp	.+1500   	; 0x1d98 <LCD_vidInit+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	fe 01       	movw	r30, r28
    17be:	ff 96       	adiw	r30, 0x3f	; 63
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9e af       	std	Y+62, r25	; 0x3e
    17d2:	8d af       	std	Y+61, r24	; 0x3d
    17d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17d8:	9a af       	std	Y+58, r25	; 0x3a
    17da:	89 af       	std	Y+57, r24	; 0x39
    17dc:	89 ad       	ldd	r24, Y+57	; 0x39
    17de:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_vidInit+0x8f6>
    17e4:	9a af       	std	Y+58, r25	; 0x3a
    17e6:	89 af       	std	Y+57, r24	; 0x39
    17e8:	d7 c2       	rjmp	.+1454   	; 0x1d98 <LCD_vidInit+0xeae>
			_delay_ms(1);

		}
		else
		{
			LCD_vidSendCmd(u8CntrLoc , 0b00100010);
    17ea:	fe 01       	movw	r30, r28
    17ec:	e1 58       	subi	r30, 0x81	; 129
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	62 e2       	ldi	r22, 0x22	; 34
    17f4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
			LCD_u84BitModFlg = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	80 93 7e 00 	sts	0x007E, r24
			// send 0bNF00
			u8CmdLoc = 0b00000000|
    17fe:	fe 01       	movw	r30, r28
    1800:	e1 58       	subi	r30, 0x81	; 129
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	c9 01       	movw	r24, r18
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	82 0f       	add	r24, r18
    1812:	93 1f       	adc	r25, r19
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	82 0f       	add	r24, r18
    181e:	93 1f       	adc	r25, r19
    1820:	fc 01       	movw	r30, r24
    1822:	e3 58       	subi	r30, 0x83	; 131
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	96 95       	lsr	r25
    1830:	98 2f       	mov	r25, r24
    1832:	88 27       	eor	r24, r24
    1834:	97 95       	ror	r25
    1836:	87 95       	ror	r24
    1838:	48 2f       	mov	r20, r24
    183a:	fe 01       	movw	r30, r28
    183c:	e1 58       	subi	r30, 0x81	; 129
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	c9 01       	movw	r24, r18
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	fc 01       	movw	r30, r24
    185e:	e3 58       	subi	r30, 0x83	; 131
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	86 95       	lsr	r24
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	00 24       	eor	r0, r0
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	07 94       	ror	r0
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	07 94       	ror	r0
    187a:	98 2f       	mov	r25, r24
    187c:	80 2d       	mov	r24, r0
    187e:	84 2b       	or	r24, r20
    1880:	fe 01       	movw	r30, r28
    1882:	e0 58       	subi	r30, 0x80	; 128
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.N_Line)<<7|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Font)<<6;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1888:	fe 01       	movw	r30, r28
    188a:	e1 58       	subi	r30, 0x81	; 129
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	de 01       	movw	r26, r28
    1890:	a0 58       	subi	r26, 0x80	; 128
    1892:	bf 4f       	sbci	r27, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	6c 91       	ld	r22, X
    1898:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
			LCD_u84BitModFlg = 0;
    189c:	10 92 7e 00 	sts	0x007E, r1
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8d ab       	std	Y+53, r24	; 0x35
    18aa:	9e ab       	std	Y+54, r25	; 0x36
    18ac:	af ab       	std	Y+55, r26	; 0x37
    18ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6d a9       	ldd	r22, Y+53	; 0x35
    18b2:	7e a9       	ldd	r23, Y+54	; 0x36
    18b4:	8f a9       	ldd	r24, Y+55	; 0x37
    18b6:	98 ad       	ldd	r25, Y+56	; 0x38
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a e7       	ldi	r20, 0x7A	; 122
    18be:	53 e4       	ldi	r21, 0x43	; 67
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	89 ab       	std	Y+49, r24	; 0x31
    18ca:	9a ab       	std	Y+50, r25	; 0x32
    18cc:	ab ab       	std	Y+51, r26	; 0x33
    18ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d0:	69 a9       	ldd	r22, Y+49	; 0x31
    18d2:	7a a9       	ldd	r23, Y+50	; 0x32
    18d4:	8b a9       	ldd	r24, Y+51	; 0x33
    18d6:	9c a9       	ldd	r25, Y+52	; 0x34
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_vidInit+0xa08>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_vidInit+0xa86>
	else if (__tmp > 65535)
    18f2:	69 a9       	ldd	r22, Y+49	; 0x31
    18f4:	7a a9       	ldd	r23, Y+50	; 0x32
    18f6:	8b a9       	ldd	r24, Y+51	; 0x33
    18f8:	9c a9       	ldd	r25, Y+52	; 0x34
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_vidInit+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6d a9       	ldd	r22, Y+53	; 0x35
    190c:	7e a9       	ldd	r23, Y+54	; 0x36
    190e:	8f a9       	ldd	r24, Y+55	; 0x37
    1910:	98 ad       	ldd	r25, Y+56	; 0x38
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	98 ab       	std	Y+48, r25	; 0x30
    1930:	8f a7       	std	Y+47, r24	; 0x2f
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_vidInit+0xa68>
    1934:	89 e1       	ldi	r24, 0x19	; 25
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e a7       	std	Y+46, r25	; 0x2e
    193a:	8d a7       	std	Y+45, r24	; 0x2d
    193c:	8d a5       	ldd	r24, Y+45	; 0x2d
    193e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_vidInit+0xa56>
    1944:	9e a7       	std	Y+46, r25	; 0x2e
    1946:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8f a5       	ldd	r24, Y+47	; 0x2f
    194a:	98 a9       	ldd	r25, Y+48	; 0x30
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_vidInit+0xa4a>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_vidInit+0xa9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	8f a5       	ldd	r24, Y+47	; 0x2f
    1972:	98 a9       	ldd	r25, Y+48	; 0x30
    1974:	9c a7       	std	Y+44, r25	; 0x2c
    1976:	8b a7       	std	Y+43, r24	; 0x2b
    1978:	8b a5       	ldd	r24, Y+43	; 0x2b
    197a:	9c a5       	ldd	r25, Y+44	; 0x2c
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_vidInit+0xa92>
    1980:	9c a7       	std	Y+44, r25	; 0x2c
    1982:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			u8CmdLoc = 0b00001000|
    1984:	fe 01       	movw	r30, r28
    1986:	e1 58       	subi	r30, 0x81	; 129
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	c9 01       	movw	r24, r18
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	fc 01       	movw	r30, r24
    19a8:	e3 58       	subi	r30, 0x83	; 131
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	86 95       	lsr	r24
    19b0:	86 95       	lsr	r24
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	48 2f       	mov	r20, r24
    19c2:	48 60       	ori	r20, 0x08	; 8
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 58       	subi	r30, 0x81	; 129
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	c9 01       	movw	r24, r18
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	fc 01       	movw	r30, r24
    19e8:	e3 58       	subi	r30, 0x83	; 131
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	86 95       	lsr	r24
    19f0:	86 95       	lsr	r24
    19f2:	86 95       	lsr	r24
    19f4:	81 70       	andi	r24, 0x01	; 1
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	48 2b       	or	r20, r24
    1a00:	fe 01       	movw	r30, r28
    1a02:	e1 58       	subi	r30, 0x81	; 129
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	c9 01       	movw	r24, r18
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	82 0f       	add	r24, r18
    1a14:	93 1f       	adc	r25, r19
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	fc 01       	movw	r30, r24
    1a24:	e3 58       	subi	r30, 0x83	; 131
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	82 95       	swap	r24
    1a2c:	8f 70       	andi	r24, 0x0F	; 15
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	84 2b       	or	r24, r20
    1a32:	fe 01       	movw	r30, r28
    1a34:	e0 58       	subi	r30, 0x80	; 128
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Display)<<2|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Cursor)<<1 |
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.C_Blink);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 58       	subi	r30, 0x81	; 129
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	de 01       	movw	r26, r28
    1a42:	a0 58       	subi	r26, 0x80	; 128
    1a44:	bf 4f       	sbci	r27, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	6c 91       	ld	r22, X
    1a4a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	8f a3       	std	Y+39, r24	; 0x27
    1a58:	98 a7       	std	Y+40, r25	; 0x28
    1a5a:	a9 a7       	std	Y+41, r26	; 0x29
    1a5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a60:	78 a5       	ldd	r23, Y+40	; 0x28
    1a62:	89 a5       	ldd	r24, Y+41	; 0x29
    1a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8b a3       	std	Y+35, r24	; 0x23
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	ad a3       	std	Y+37, r26	; 0x25
    1a7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_vidInit+0xbb6>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9a a3       	std	Y+34, r25	; 0x22
    1a9c:	89 a3       	std	Y+33, r24	; 0x21
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_vidInit+0xc34>
	else if (__tmp > 65535)
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_vidInit+0xc20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aba:	78 a5       	ldd	r23, Y+40	; 0x28
    1abc:	89 a5       	ldd	r24, Y+41	; 0x29
    1abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_vidInit+0xc16>
    1ae2:	89 e1       	ldi	r24, 0x19	; 25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	98 a3       	std	Y+32, r25	; 0x20
    1ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aec:	98 a1       	ldd	r25, Y+32	; 0x20
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_vidInit+0xc04>
    1af2:	98 a3       	std	Y+32, r25	; 0x20
    1af4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	89 a1       	ldd	r24, Y+33	; 0x21
    1af8:	9a a1       	ldd	r25, Y+34	; 0x22
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_vidInit+0xbf8>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_vidInit+0xc48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	9e 8f       	std	Y+30, r25	; 0x1e
    1b24:	8d 8f       	std	Y+29, r24	; 0x1d
    1b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_vidInit+0xc40>
    1b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b30:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			LCD_vidSendCmd(u8CntrLoc , 0x01);
    1b32:	fe 01       	movw	r30, r28
    1b34:	e1 58       	subi	r30, 0x81	; 129
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e4       	ldi	r27, 0x40	; 64
    1b48:	89 8f       	std	Y+25, r24	; 0x19
    1b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	69 8d       	ldd	r22, Y+25	; 0x19
    1b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8d 8b       	std	Y+21, r24	; 0x15
    1b6a:	9e 8b       	std	Y+22, r25	; 0x16
    1b6c:	af 8b       	std	Y+23, r26	; 0x17
    1b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_vidInit+0xca8>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_vidInit+0xd26>
	else if (__tmp > 65535)
    1b92:	6d 89       	ldd	r22, Y+21	; 0x15
    1b94:	7e 89       	ldd	r23, Y+22	; 0x16
    1b96:	8f 89       	ldd	r24, Y+23	; 0x17
    1b98:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_vidInit+0xd12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_vidInit+0xd08>
    1bd4:	89 e1       	ldi	r24, 0x19	; 25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9a 8b       	std	Y+18, r25	; 0x12
    1bda:	89 8b       	std	Y+17, r24	; 0x11
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	9a 89       	ldd	r25, Y+18	; 0x12
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_vidInit+0xcf6>
    1be4:	9a 8b       	std	Y+18, r25	; 0x12
    1be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bea:	9c 89       	ldd	r25, Y+20	; 0x14
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_vidInit+0xcea>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_vidInit+0xd3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1c00:	8f 89       	ldd	r24, Y+23	; 0x17
    1c02:	98 8d       	ldd	r25, Y+24	; 0x18
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	98 8b       	std	Y+16, r25	; 0x10
    1c16:	8f 87       	std	Y+15, r24	; 0x0f
    1c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1a:	98 89       	ldd	r25, Y+16	; 0x10
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_vidInit+0xd32>
    1c20:	98 8b       	std	Y+16, r25	; 0x10
    1c22:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(2);

			u8CmdLoc = 0b00000100|
    1c24:	fe 01       	movw	r30, r28
    1c26:	e1 58       	subi	r30, 0x81	; 129
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	c9 01       	movw	r24, r18
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	82 0f       	add	r24, r18
    1c44:	93 1f       	adc	r25, r19
    1c46:	fc 01       	movw	r30, r24
    1c48:	e3 58       	subi	r30, 0x83	; 131
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	82 95       	swap	r24
    1c50:	86 95       	lsr	r24
    1c52:	87 70       	andi	r24, 0x07	; 7
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	48 2f       	mov	r20, r24
    1c60:	44 60       	ori	r20, 0x04	; 4
    1c62:	fe 01       	movw	r30, r28
    1c64:	e1 58       	subi	r30, 0x81	; 129
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	c9 01       	movw	r24, r18
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	fc 01       	movw	r30, r24
    1c86:	e3 58       	subi	r30, 0x83	; 131
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	82 95       	swap	r24
    1c8e:	86 95       	lsr	r24
    1c90:	86 95       	lsr	r24
    1c92:	83 70       	andi	r24, 0x03	; 3
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	84 2b       	or	r24, r20
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e0 58       	subi	r30, 0x80	; 128
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.EntryMode)<<1|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Shift);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e1 58       	subi	r30, 0x81	; 129
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	de 01       	movw	r26, r28
    1ca8:	a0 58       	subi	r26, 0x80	; 128
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	6c 91       	ld	r22, X
    1cb0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	8b 87       	std	Y+11, r24	; 0x0b
    1cbe:	9c 87       	std	Y+12, r25	; 0x0c
    1cc0:	ad 87       	std	Y+13, r26	; 0x0d
    1cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a e7       	ldi	r20, 0x7A	; 122
    1cd2:	53 e4       	ldi	r21, 0x43	; 67
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8f 83       	std	Y+7, r24	; 0x07
    1cde:	98 87       	std	Y+8, r25	; 0x08
    1ce0:	a9 87       	std	Y+9, r26	; 0x09
    1ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <LCD_vidInit+0xe1c>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <LCD_vidInit+0xe9a>
	else if (__tmp > 65535)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <LCD_vidInit+0xe86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_vidInit+0xe7c>
    1d48:	89 e1       	ldi	r24, 0x19	; 25
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_vidInit+0xe6a>
    1d58:	9c 83       	std	Y+4, r25	; 0x04
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <LCD_vidInit+0xe5e>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <LCD_vidInit+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_vidInit+0xea6>
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidInit()
{
	uint8 u8CmdLoc;
	uint8 u8CntrLoc = 0;

	for(u8CntrLoc = 0 ;u8CntrLoc< LCD_MAX_NUM ; u8CntrLoc++)
    1d98:	de 01       	movw	r26, r28
    1d9a:	a1 58       	subi	r26, 0x81	; 129
    1d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e1 58       	subi	r30, 0x81	; 129
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 5f       	subi	r24, 0xFF	; 255
    1da8:	8c 93       	st	X, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	e1 58       	subi	r30, 0x81	; 129
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	88 23       	and	r24, r24
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <LCD_vidInit+0xece>
    1db6:	af c8       	rjmp	.-3746   	; 0xf16 <LCD_vidInit+0x2c>

		}

	}

}
    1db8:	c0 58       	subi	r28, 0x80	; 128
    1dba:	df 4f       	sbci	r29, 0xFF	; 255
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	08 95       	ret

00001dd0 <LCD_vidSendCmd>:

void LCD_vidSendCmd(uint8 u8LcdIndxCpy, uint8 u8CmdCpy)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <LCD_vidSendCmd+0x6>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rs, 0);
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	c9 01       	movw	r24, r18
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	82 0f       	add	r24, r18
    1df8:	93 1f       	adc	r25, r19
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	ee 58       	subi	r30, 0x8E	; 142
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
	ModeHelper(u8LcdIndxCpy, u8CmdCpy);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e0c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <ModeHelper>
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <LCD_vidWriteData>:

void LCD_vidWriteData(uint8 u8LcdIndxCpy, uint8 u8DataCpy)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <LCD_vidWriteData+0x6>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rs, 1);
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	c9 01       	movw	r24, r18
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	82 0f       	add	r24, r18
    1e36:	93 1f       	adc	r25, r19
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	82 0f       	add	r24, r18
    1e42:	93 1f       	adc	r25, r19
    1e44:	fc 01       	movw	r30, r24
    1e46:	ee 58       	subi	r30, 0x8E	; 142
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
	ModeHelper(u8LcdIndxCpy, u8DataCpy);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	6a 81       	ldd	r22, Y+2	; 0x02
    1e56:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <ModeHelper>
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <ModeHelper>:

static void ModeHelper (uint8 u8LcdIndxCpy, uint8 u8DataorCmdCpy)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <ModeHelper+0x6>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02

	if(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Concmode == LCD_8BIT_MODE)
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	c9 01       	movw	r24, r18
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	82 0f       	add	r24, r18
    1e80:	93 1f       	adc	r25, r19
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	fc 01       	movw	r30, r24
    1e90:	ef 58       	subi	r30, 0x8F	; 143
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	31 f4       	brne	.+12     	; 0x1ea6 <ModeHelper+0x42>
	{
		WriteHelper(_8BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	4a 81       	ldd	r20, Y+2	; 0x02
    1ea0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <WriteHelper>
    1ea4:	2d c0       	rjmp	.+90     	; 0x1f00 <ModeHelper+0x9c>
	}
	else
	{
		DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rw,0);
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	c9 01       	movw	r24, r18
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	82 0f       	add	r24, r18
    1ec0:	93 1f       	adc	r25, r19
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	ed 58       	subi	r30, 0x8D	; 141
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>

		if(LCD_u84BitModFlg == 1)
    1ed0:	80 91 7e 00 	lds	r24, 0x007E
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	31 f4       	brne	.+12     	; 0x1ee4 <ModeHelper+0x80>
		{
			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	69 81       	ldd	r22, Y+1	; 0x01
    1edc:	4a 81       	ldd	r20, Y+2	; 0x02
    1ede:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <WriteHelper>
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <ModeHelper+0x9c>
		}
		else
		{
			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	69 81       	ldd	r22, Y+1	; 0x01
    1ee8:	4a 81       	ldd	r20, Y+2	; 0x02
    1eea:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <WriteHelper>

			u8DataorCmdCpy = u8DataorCmdCpy << 4;
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	82 95       	swap	r24
    1ef2:	80 7f       	andi	r24, 0xF0	; 240
    1ef4:	8a 83       	std	Y+2, r24	; 0x02

			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	69 81       	ldd	r22, Y+1	; 0x01
    1efa:	4a 81       	ldd	r20, Y+2	; 0x02
    1efc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <WriteHelper>
		}

	}
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <WriteHelper>:

static void WriteHelper(uint8 u8StartPin, uint8 u8lcdIndxCpy, uint8 u8DataorCmdCpy)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	a0 97       	sbiw	r28, 0x20	; 32
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f20:	6f 8f       	std	Y+31, r22	; 0x1f
    1f22:	48 a3       	std	Y+32, r20	; 0x20
			uint8 u8PinNumLoc;

			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Rw, 0);
    1f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	c9 01       	movw	r24, r18
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	fc 01       	movw	r30, r24
    1f42:	ed 58       	subi	r30, 0x8D	; 141
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 1);
    1f4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	c9 01       	movw	r24, r18
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	82 0f       	add	r24, r18
    1f5c:	93 1f       	adc	r25, r19
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	82 0f       	add	r24, r18
    1f68:	93 1f       	adc	r25, r19
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	ec 58       	subi	r30, 0x8C	; 140
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	61 e0       	ldi	r22, 0x01	; 1
    1f74:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>

			for (u8PinNumLoc = u8StartPin; u8PinNumLoc < 8; ++u8PinNumLoc)
    1f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f7c:	2d c0       	rjmp	.+90     	; 0x1fd8 <WriteHelper+0xce>
			{
				DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Databus[u8PinNumLoc],
    1f7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f86:	48 2f       	mov	r20, r24
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	c9 01       	movw	r24, r18
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	82 0f       	add	r24, r18
    1f9e:	93 1f       	adc	r25, r19
    1fa0:	84 0f       	add	r24, r20
    1fa2:	95 1f       	adc	r25, r21
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	eb 58       	subi	r30, 0x8B	; 139
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	40 81       	ld	r20, Z
    1fac:	88 a1       	ldd	r24, Y+32	; 0x20
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	b9 01       	movw	r22, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <WriteHelper+0xb6>
    1fbc:	75 95       	asr	r23
    1fbe:	67 95       	ror	r22
    1fc0:	8a 95       	dec	r24
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <WriteHelper+0xb2>
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	98 2f       	mov	r25, r24
    1fc8:	91 70       	andi	r25, 0x01	; 1
    1fca:	84 2f       	mov	r24, r20
    1fcc:	69 2f       	mov	r22, r25
    1fce:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
			uint8 u8PinNumLoc;

			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Rw, 0);
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 1);

			for (u8PinNumLoc = u8StartPin; u8PinNumLoc < 8; ++u8PinNumLoc)
    1fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fda:	88 30       	cpi	r24, 0x08	; 8
    1fdc:	80 f2       	brcs	.-96     	; 0x1f7e <WriteHelper+0x74>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e8       	ldi	r26, 0x80	; 128
    1fe4:	bf e3       	ldi	r27, 0x3F	; 63
    1fe6:	89 8f       	std	Y+25, r24	; 0x19
    1fe8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fea:	ab 8f       	std	Y+27, r26	; 0x1b
    1fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	53 e4       	ldi	r21, 0x43	; 67
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8d 8b       	std	Y+21, r24	; 0x15
    2008:	9e 8b       	std	Y+22, r25	; 0x16
    200a:	af 8b       	std	Y+23, r26	; 0x17
    200c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <WriteHelper+0x126>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <WriteHelper+0x1a4>
	else if (__tmp > 65535)
    2030:	6d 89       	ldd	r22, Y+21	; 0x15
    2032:	7e 89       	ldd	r23, Y+22	; 0x16
    2034:	8f 89       	ldd	r24, Y+23	; 0x17
    2036:	98 8d       	ldd	r25, Y+24	; 0x18
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <WriteHelper+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	69 8d       	ldd	r22, Y+25	; 0x19
    204a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9c 8b       	std	Y+20, r25	; 0x14
    206e:	8b 8b       	std	Y+19, r24	; 0x13
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <WriteHelper+0x186>
    2072:	89 e1       	ldi	r24, 0x19	; 25
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9a 8b       	std	Y+18, r25	; 0x12
    2078:	89 8b       	std	Y+17, r24	; 0x11
    207a:	89 89       	ldd	r24, Y+17	; 0x11
    207c:	9a 89       	ldd	r25, Y+18	; 0x12
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <WriteHelper+0x174>
    2082:	9a 8b       	std	Y+18, r25	; 0x12
    2084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <WriteHelper+0x168>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <WriteHelper+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9c 8b       	std	Y+20, r25	; 0x14
    20ac:	8b 8b       	std	Y+19, r24	; 0x13
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	98 8b       	std	Y+16, r25	; 0x10
    20b4:	8f 87       	std	Y+15, r24	; 0x0f
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	98 89       	ldd	r25, Y+16	; 0x10
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <WriteHelper+0x1b0>
    20be:	98 8b       	std	Y+16, r25	; 0x10
    20c0:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Databus[u8PinNumLoc],
						GET_BIT(u8DataorCmdCpy, u8PinNumLoc));
			}

			_delay_ms(1);
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 0);
    20c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	c9 01       	movw	r24, r18
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	82 0f       	add	r24, r18
    20d0:	93 1f       	adc	r25, r19
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	fc 01       	movw	r30, r24
    20e0:	ec 58       	subi	r30, 0x8C	; 140
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a0 e8       	ldi	r26, 0x80	; 128
    20f2:	bf e3       	ldi	r27, 0x3F	; 63
    20f4:	8b 87       	std	Y+11, r24	; 0x0b
    20f6:	9c 87       	std	Y+12, r25	; 0x0c
    20f8:	ad 87       	std	Y+13, r26	; 0x0d
    20fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a e7       	ldi	r20, 0x7A	; 122
    210a:	53 e4       	ldi	r21, 0x43	; 67
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8f 83       	std	Y+7, r24	; 0x07
    2116:	98 87       	std	Y+8, r25	; 0x08
    2118:	a9 87       	std	Y+9, r26	; 0x09
    211a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <WriteHelper+0x234>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <WriteHelper+0x2b2>
	else if (__tmp > 65535)
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <WriteHelper+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6b 85       	ldd	r22, Y+11	; 0x0b
    2158:	7c 85       	ldd	r23, Y+12	; 0x0c
    215a:	8d 85       	ldd	r24, Y+13	; 0x0d
    215c:	9e 85       	ldd	r25, Y+14	; 0x0e
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	0f c0       	rjmp	.+30     	; 0x219e <WriteHelper+0x294>
    2180:	89 e1       	ldi	r24, 0x19	; 25
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <WriteHelper+0x282>
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <WriteHelper+0x276>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <WriteHelper+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <WriteHelper+0x2be>
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
}
    21d0:	a0 96       	adiw	r28, 0x20	; 32
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_vidWriteString>:

void LCD_vidWriteString(uint8 u8LcdIndxCpy,char* charSTring )
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_vidWriteString+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_vidWriteString+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	7c 83       	std	Y+4, r23	; 0x04
    21f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8cntr=0;
    21f4:	19 82       	std	Y+1, r1	; 0x01
    21f6:	10 c0       	rjmp	.+32     	; 0x2218 <LCD_vidWriteString+0x36>
	while (charSTring[u8cntr]!='\0')
	{
		LCD_vidWriteData(u8LcdIndxCpy,charSTring[u8cntr]);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	90 81       	ld	r25, Z
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	69 2f       	mov	r22, r25
    220e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_vidWriteData>
		u8cntr++;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidWriteString(uint8 u8LcdIndxCpy,char* charSTring )
{
	uint8 u8cntr=0;
	while (charSTring[u8cntr]!='\0')
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	fc 01       	movw	r30, r24
    2224:	e2 0f       	add	r30, r18
    2226:	f3 1f       	adc	r31, r19
    2228:	80 81       	ld	r24, Z
    222a:	88 23       	and	r24, r24
    222c:	29 f7       	brne	.-54     	; 0x21f8 <LCD_vidWriteString+0x16>
	{
		LCD_vidWriteData(u8LcdIndxCpy,charSTring[u8cntr]);
		u8cntr++;
	}
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_vidWriteNumber>:


void LCD_vidWriteNumber(uint8 u8LCDIndx, uint32 u32NumberCpy)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	68 97       	sbiw	r28, 0x18	; 24
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	8e 8b       	std	Y+22, r24	; 0x16
    2252:	78 8f       	std	Y+24, r23	; 0x18
    2254:	6f 8b       	std	Y+23, r22	; 0x17
	uint8 u8CntrLoc = 0, au8ModArray[15];
    2256:	1e 82       	std	Y+6, r1	; 0x06
	int8_t u8IteratorLoc;
	uint32 u32ResultLoc, u32NumberHolderLoc = u32NumberCpy;
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01

	// Handle the case when the number is zero
	if (u32NumberCpy == 0)
    2260:	8f 89       	ldd	r24, Y+23	; 0x17
    2262:	98 8d       	ldd	r25, Y+24	; 0x18
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	29 f5       	brne	.+74     	; 0x22b2 <LCD_vidWriteNumber+0x76>
	{
		LCD_vidWriteData(u8LCDIndx, '0');
    2268:	8e 89       	ldd	r24, Y+22	; 0x16
    226a:	60 e3       	ldi	r22, 0x30	; 48
    226c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_vidWriteData>
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <LCD_vidWriteNumber+0xb4>
		return;
	}

	while (u32NumberHolderLoc != 0)
	{
		u32ResultLoc = u32NumberHolderLoc % 10;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	b9 01       	movw	r22, r18
    227c:	0e 94 46 13 	call	0x268c	; 0x268c <__udivmodhi4>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		au8ModArray[u8CntrLoc] = u32ResultLoc;
    2284:	8e 81       	ldd	r24, Y+6	; 0x06
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4b 81       	ldd	r20, Y+3	; 0x03
    228c:	ce 01       	movw	r24, r28
    228e:	07 96       	adiw	r24, 0x07	; 7
    2290:	fc 01       	movw	r30, r24
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	40 83       	st	Z, r20
		u32NumberHolderLoc = u32NumberHolderLoc / 10;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	2a e0       	ldi	r18, 0x0A	; 10
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	b9 01       	movw	r22, r18
    22a2:	0e 94 46 13 	call	0x268c	; 0x268c <__udivmodhi4>
    22a6:	cb 01       	movw	r24, r22
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01

		u8CntrLoc++;
    22ac:	8e 81       	ldd	r24, Y+6	; 0x06
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	8e 83       	std	Y+6, r24	; 0x06
	{
		LCD_vidWriteData(u8LCDIndx, '0');
		return;
	}

	while (u32NumberHolderLoc != 0)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	e1 f6       	brne	.-72     	; 0x2272 <LCD_vidWriteNumber+0x36>
		u32NumberHolderLoc = u32NumberHolderLoc / 10;

		u8CntrLoc++;
	}

	for(u8IteratorLoc = u8CntrLoc - 1; u8IteratorLoc >= 0; u8IteratorLoc--)
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	81 50       	subi	r24, 0x01	; 1
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <LCD_vidWriteNumber+0xae>
	{
		/*48 is added cuz it's the starting address of the ASCII Numbers 0--9*/
		LCD_vidWriteData(u8LCDIndx, (au8ModArray[u8IteratorLoc] + 48));
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	28 2f       	mov	r18, r24
    22c6:	33 27       	eor	r19, r19
    22c8:	27 fd       	sbrc	r18, 7
    22ca:	30 95       	com	r19
    22cc:	ce 01       	movw	r24, r28
    22ce:	07 96       	adiw	r24, 0x07	; 7
    22d0:	fc 01       	movw	r30, r24
    22d2:	e2 0f       	add	r30, r18
    22d4:	f3 1f       	adc	r31, r19
    22d6:	80 81       	ld	r24, Z
    22d8:	98 2f       	mov	r25, r24
    22da:	90 5d       	subi	r25, 0xD0	; 208
    22dc:	8e 89       	ldd	r24, Y+22	; 0x16
    22de:	69 2f       	mov	r22, r25
    22e0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <LCD_vidWriteData>
		u32NumberHolderLoc = u32NumberHolderLoc / 10;

		u8CntrLoc++;
	}

	for(u8IteratorLoc = u8CntrLoc - 1; u8IteratorLoc >= 0; u8IteratorLoc--)
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	81 50       	subi	r24, 0x01	; 1
    22e8:	8d 83       	std	Y+5, r24	; 0x05
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	88 23       	and	r24, r24
    22ee:	4c f7       	brge	.-46     	; 0x22c2 <LCD_vidWriteNumber+0x86>
	{
		/*48 is added cuz it's the starting address of the ASCII Numbers 0--9*/
		LCD_vidWriteData(u8LCDIndx, (au8ModArray[u8IteratorLoc] + 48));

	}
}
    22f0:	68 96       	adiw	r28, 0x18	; 24
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <SPI_vidInit>:


static pf SPI_pfCallbackTransmitComp = Stub;

void   SPI_vidInit(void)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <SPI_vidInit+0x6>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
	uint8 u8SPCR_Pre = 0b01000000 ;
    230c:	80 e4       	ldi	r24, 0x40	; 64
    230e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8SPSR_Pre = 0 ;
    2310:	19 82       	std	Y+1, r1	; 0x01

	u8SPCR_Pre |= SPI_DATA_ORDER << 5    | SPI_MODE << 4     |
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	84 61       	ori	r24, 0x14	; 20
    2316:	8a 83       	std	Y+2, r24	; 0x02
	              SPI_CLK_IDLE_STATE << 3| SPI_PHASE_STS << 2|
				  (SPI_PRESCALER & 0b00000011);

	u8SPSR_Pre |= (SPI_PRESCALER & 0b00000100) >> 2;
    SPSR = u8SPSR_Pre;
    2318:	ee e2       	ldi	r30, 0x2E	; 46
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	80 83       	st	Z, r24
    SPCR = 	u8SPCR_Pre;
    2320:	ed e2       	ldi	r30, 0x2D	; 45
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	80 83       	st	Z, r24
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <SPI_vidEnable>:

void SPI_vidEnable(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,6);
    233a:	ad e2       	ldi	r26, 0x2D	; 45
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ed e2       	ldi	r30, 0x2D	; 45
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	80 64       	ori	r24, 0x40	; 64
    2346:	8c 93       	st	X, r24
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <SPI_vidDisable>:
void SPI_vidDisable(void)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,6);
    2356:	ad e2       	ldi	r26, 0x2D	; 45
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	ed e2       	ldi	r30, 0x2D	; 45
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 7b       	andi	r24, 0xBF	; 191
    2362:	8c 93       	st	X, r24
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <SPI_vidEnableTransCmpIreq>:

void SPI_vidEnableTransCmpIreq(void)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,7);	
    2372:	ad e2       	ldi	r26, 0x2D	; 45
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ed e2       	ldi	r30, 0x2D	; 45
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 68       	ori	r24, 0x80	; 128
    237e:	8c 93       	st	X, r24
}
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <SPI_vidDisableTransCmpIreq>:
void SPI_vidDisableTransCmpIreq(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,7);
    238e:	ad e2       	ldi	r26, 0x2D	; 45
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ed e2       	ldi	r30, 0x2D	; 45
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 77       	andi	r24, 0x7F	; 127
    239a:	8c 93       	st	X, r24
}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <SPI_vidSetCallBackTransCmp>:

void SPI_vidSetCallBackTransCmp(pf pfCallbackCpy)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <SPI_vidSetCallBackTransCmp+0x6>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	SPI_pfCallbackTransmitComp = pfCallbackCpy ;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	90 93 70 00 	sts	0x0070, r25
    23b8:	80 93 6f 00 	sts	0x006F, r24
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <SPI_u8TransmitDataSync>:

uint8 SPI_u8TransmitDataSync(uint8 u8DataCpy)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = u8DataCpy;
    23d2:	ef e2       	ldi	r30, 0x2F	; 47
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	80 83       	st	Z, r24
	while ((GET_BIT(SPSR,7)) == 0);
    23da:	ee e2       	ldi	r30, 0x2E	; 46
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	88 23       	and	r24, r24
    23e2:	dc f7       	brge	.-10     	; 0x23da <SPI_u8TransmitDataSync+0x14>

	return SPDR;
    23e4:	ef e2       	ldi	r30, 0x2F	; 47
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
}
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <SPI_u8ReadDataReg>:


uint8 SPI_u8ReadDataReg(void)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    23fa:	ef e2       	ldi	r30, 0x2F	; 47
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <SPI_vidWriteDataReg>:
void SPI_vidWriteDataReg(uint8 u8DataCpy)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	89 83       	std	Y+1, r24	; 0x01
	SPDR = u8DataCpy;
    2412:	ef e2       	ldi	r30, 0x2F	; 47
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	80 83       	st	Z, r24
}
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <__vector_12>:
void __vector_12 (void) __attribute__((signal,used));
void __vector_12 (void)
{
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	2f 93       	push	r18
    242e:	3f 93       	push	r19
    2430:	4f 93       	push	r20
    2432:	5f 93       	push	r21
    2434:	6f 93       	push	r22
    2436:	7f 93       	push	r23
    2438:	8f 93       	push	r24
    243a:	9f 93       	push	r25
    243c:	af 93       	push	r26
    243e:	bf 93       	push	r27
    2440:	ef 93       	push	r30
    2442:	ff 93       	push	r31
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	SPI_pfCallbackTransmitComp();
    244c:	e0 91 6f 00 	lds	r30, 0x006F
    2450:	f0 91 70 00 	lds	r31, 0x0070
    2454:	09 95       	icall
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	bf 91       	pop	r27
    2460:	af 91       	pop	r26
    2462:	9f 91       	pop	r25
    2464:	8f 91       	pop	r24
    2466:	7f 91       	pop	r23
    2468:	6f 91       	pop	r22
    246a:	5f 91       	pop	r21
    246c:	4f 91       	pop	r20
    246e:	3f 91       	pop	r19
    2470:	2f 91       	pop	r18
    2472:	0f 90       	pop	r0
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	0f 90       	pop	r0
    2478:	1f 90       	pop	r1
    247a:	18 95       	reti

0000247c <Stub>:


static void Stub (void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <TC72_vidInit>:
#include "TC72.h"
#include "TC72_cnfg.h"
#include "TC72_priv.h"

void TC72_vidInit()
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    // Initialize SPI communication
    SPI_vidInit();
    2492:	0e 94 81 11 	call	0x2302	; 0x2302 <SPI_vidInit>
    
    // Initialize the CE pin as output
    DIO_vidInit();
    2496:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidInit>
    DIO_enumWritePin(CE_PIN, 1); // Set CE_PIN to high initially
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
    
    // Set the TC72 to continuous temperature conversion mode
    TC72_vidSelectMode(AUTO_CONVERSION_MODE); // Continuous conversion mode
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	0e 94 57 12 	call	0x24ae	; 0x24ae <TC72_vidSelectMode>
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <TC72_vidSelectMode>:

void TC72_vidSelectMode(uint8 u8ModeCpy)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	0f 92       	push	r0
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	89 83       	std	Y+1, r24	; 0x01
    // Assert the chip enable (CE) pin low to select the TC72
    CE_PIN_LOW();
    24ba:	0e 94 9f 12 	call	0x253e	; 0x253e <CE_PIN_LOW>

    // Write the control register address with the write flag
    SPI_u8TransmitDataSync(CONTROL_REG_WRITE);
    24be:	80 e8       	ldi	r24, 0x80	; 128
    24c0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SPI_u8TransmitDataSync>

    // Write the mode to the control register
    SPI_u8TransmitDataSync(u8ModeCpy);
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SPI_u8TransmitDataSync>

    // Deassert the chip enable (CE) pin high to deselect the TC72
    CE_PIN_HIGH();
    24ca:	0e 94 94 12 	call	0x2528	; 0x2528 <CE_PIN_HIGH>
}
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <TC72_u8ReadData>:

uint8 TC72_u8ReadData()
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	0f 92       	push	r0
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    uint8 u8TempData = 0;
    24e0:	19 82       	std	Y+1, r1	; 0x01

    // Assert the chip enable (CE) pin low to select the TC72
    CE_PIN_LOW();
    24e2:	0e 94 9f 12 	call	0x253e	; 0x253e <CE_PIN_LOW>

    // Select the MSB temperature register for reading
    SPI_u8TransmitDataSync(MSB_TEMP_REG);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SPI_u8TransmitDataSync>
    
    // Read MSB temperature register
    u8TempData = SPI_u8ReadDataReg();
    24ec:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SPI_u8ReadDataReg>
    24f0:	89 83       	std	Y+1, r24	; 0x01

    // Deassert the chip enable (CE) pin high to deselect the TC72
    CE_PIN_HIGH();
    24f2:	0e 94 94 12 	call	0x2528	; 0x2528 <CE_PIN_HIGH>

    return u8TempData;
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <TC72_vidWriteData>:

void TC72_vidWriteData(uint8 u8DataCpy)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	0f 92       	push	r0
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	89 83       	std	Y+1, r24	; 0x01
    // This function can be used for future write operations to the TC72
    CE_PIN_LOW();
    250c:	0e 94 9f 12 	call	0x253e	; 0x253e <CE_PIN_LOW>

    SPI_u8TransmitDataSync(CONTROL_REG_WRITE);
    2510:	80 e8       	ldi	r24, 0x80	; 128
    2512:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SPI_u8TransmitDataSync>
    SPI_u8TransmitDataSync(u8DataCpy);
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SPI_u8TransmitDataSync>

    CE_PIN_HIGH();
    251c:	0e 94 94 12 	call	0x2528	; 0x2528 <CE_PIN_HIGH>
}
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <CE_PIN_HIGH>:

// CE_PIN control functions
void CE_PIN_HIGH()
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    DIO_enumWritePin(CE_PIN, 1); // Set CE_PIN to high
    2530:	8a e0       	ldi	r24, 0x0A	; 10
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
}
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <CE_PIN_LOW>:

void CE_PIN_LOW()
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    DIO_enumWritePin(CE_PIN, 0); // Set CE_PIN to low
    2546:	8a e0       	ldi	r24, 0x0A	; 10
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <main>:
//HAL
#include "LCD.h"
#include "TC72.h"

int main()
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	2f 97       	sbiw	r28, 0x0f	; 15
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
	DIO_vidInit();
    2568:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidInit>
	LCD_vidInit();
    256c:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_vidInit>

	TC72_vidInit();
    2570:	0e 94 45 12 	call	0x248a	; 0x248a <TC72_vidInit>

	uint8 u8TempLoc = 0;
    2574:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_vidSendCmd(0, LCD_CLR);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>

	while(1)
	{
		LCD_vidSendCmd(0, LCD_CLR);
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_vidSendCmd>
		u8TempLoc = TC72_u8ReadData();
    2586:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <TC72_u8ReadData>
    258a:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_vidWriteString(0, "Temp: ");
    258c:	20 e6       	ldi	r18, 0x60	; 96
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	b9 01       	movw	r22, r18
    2594:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_vidWriteString>
		LCD_vidWriteNumber(0, u8TempLoc);
    2598:	8f 85       	ldd	r24, Y+15	; 0x0f
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	b9 01       	movw	r22, r18
    25a2:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_vidWriteNumber>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	aa e7       	ldi	r26, 0x7A	; 122
    25ac:	b4 e4       	ldi	r27, 0x44	; 68
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
    25b0:	9c 87       	std	Y+12, r25	; 0x0c
    25b2:	ad 87       	std	Y+13, r26	; 0x0d
    25b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a e7       	ldi	r20, 0x7A	; 122
    25c4:	53 e4       	ldi	r21, 0x43	; 67
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8f 83       	std	Y+7, r24	; 0x07
    25d0:	98 87       	std	Y+8, r25	; 0x08
    25d2:	a9 87       	std	Y+9, r26	; 0x09
    25d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <main+0xa4>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	3f c0       	rjmp	.+126    	; 0x2676 <main+0x122>
	else if (__tmp > 65535)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	4c f5       	brge	.+82     	; 0x2662 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	6b 85       	ldd	r22, Y+11	; 0x0b
    2612:	7c 85       	ldd	r23, Y+12	; 0x0c
    2614:	8d 85       	ldd	r24, Y+13	; 0x0d
    2616:	9e 85       	ldd	r25, Y+14	; 0x0e
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <main+0x104>
    263a:	89 e1       	ldi	r24, 0x19	; 25
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <main+0xf2>
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f7       	brne	.-38     	; 0x263a <main+0xe6>
    2660:	8e cf       	rjmp	.-228    	; 0x257e <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <main+0x12e>
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	79 cf       	rjmp	.-270    	; 0x257e <main+0x2a>

0000268c <__udivmodhi4>:
    268c:	aa 1b       	sub	r26, r26
    268e:	bb 1b       	sub	r27, r27
    2690:	51 e1       	ldi	r21, 0x11	; 17
    2692:	07 c0       	rjmp	.+14     	; 0x26a2 <__udivmodhi4_ep>

00002694 <__udivmodhi4_loop>:
    2694:	aa 1f       	adc	r26, r26
    2696:	bb 1f       	adc	r27, r27
    2698:	a6 17       	cp	r26, r22
    269a:	b7 07       	cpc	r27, r23
    269c:	10 f0       	brcs	.+4      	; 0x26a2 <__udivmodhi4_ep>
    269e:	a6 1b       	sub	r26, r22
    26a0:	b7 0b       	sbc	r27, r23

000026a2 <__udivmodhi4_ep>:
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	5a 95       	dec	r21
    26a8:	a9 f7       	brne	.-22     	; 0x2694 <__udivmodhi4_loop>
    26aa:	80 95       	com	r24
    26ac:	90 95       	com	r25
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	08 95       	ret

000026b4 <__prologue_saves__>:
    26b4:	2f 92       	push	r2
    26b6:	3f 92       	push	r3
    26b8:	4f 92       	push	r4
    26ba:	5f 92       	push	r5
    26bc:	6f 92       	push	r6
    26be:	7f 92       	push	r7
    26c0:	8f 92       	push	r8
    26c2:	9f 92       	push	r9
    26c4:	af 92       	push	r10
    26c6:	bf 92       	push	r11
    26c8:	cf 92       	push	r12
    26ca:	df 92       	push	r13
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	ca 1b       	sub	r28, r26
    26de:	db 0b       	sbc	r29, r27
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	09 94       	ijmp

000026ec <__epilogue_restores__>:
    26ec:	2a 88       	ldd	r2, Y+18	; 0x12
    26ee:	39 88       	ldd	r3, Y+17	; 0x11
    26f0:	48 88       	ldd	r4, Y+16	; 0x10
    26f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    26f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    26f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    26f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    26fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    26fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    26fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2700:	c8 84       	ldd	r12, Y+8	; 0x08
    2702:	df 80       	ldd	r13, Y+7	; 0x07
    2704:	ee 80       	ldd	r14, Y+6	; 0x06
    2706:	fd 80       	ldd	r15, Y+5	; 0x05
    2708:	0c 81       	ldd	r16, Y+4	; 0x04
    270a:	1b 81       	ldd	r17, Y+3	; 0x03
    270c:	aa 81       	ldd	r26, Y+2	; 0x02
    270e:	b9 81       	ldd	r27, Y+1	; 0x01
    2710:	ce 0f       	add	r28, r30
    2712:	d1 1d       	adc	r29, r1
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	ed 01       	movw	r28, r26
    2720:	08 95       	ret

00002722 <_exit>:
    2722:	f8 94       	cli

00002724 <__stop_program>:
    2724:	ff cf       	rjmp	.-2      	; 0x2724 <__stop_program>
