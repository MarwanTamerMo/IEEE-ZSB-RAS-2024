
Task_11_Controlling_Motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a08  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009a7  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 08 02 	call	0x410	; 0x410 <main>
  64:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vidInit>:
#include "DIO_priv.h"



void DIO_vidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	
  DDRA = Conc(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
  DDRB = Conc(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
  DDRC = Conc(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16);
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8c e7       	ldi	r24, 0x7C	; 124
  8a:	80 83       	st	Z, r24
  DDRD = Conc(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24);
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8b e7       	ldi	r24, 0x7B	; 123
  92:	80 83       	st	Z, r24
	
	
}
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

0000009a <DIO_enuWritePin>:
/********************************************************/
/*u8PinNumCpy: 0--7 (A)  8--15 (B) 16 --23 (C)24--31 (D)*/
/********************************************************/
tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy , uint8 u8PinValCpy)
{
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	2b 97       	sbiw	r28, 0x0b	; 11
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	8a 83       	std	Y+2, r24	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuErrorLoc = E_OK ;
  b2:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	d8 f5       	brcc	.+118    	; 0x130 <DIO_enuWritePin+0x96>
	{
		// ODRA === PORTA  1101 0000
		switch(u8PinValCpy)
  ba:	8b 81       	ldd	r24, Y+3	; 0x03
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	3b 87       	std	Y+11, r19	; 0x0b
  c2:	2a 87       	std	Y+10, r18	; 0x0a
  c4:	8a 85       	ldd	r24, Y+10	; 0x0a
  c6:	9b 85       	ldd	r25, Y+11	; 0x0b
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	31 f0       	breq	.+12     	; 0xd8 <DIO_enuWritePin+0x3e>
  cc:	2a 85       	ldd	r18, Y+10	; 0x0a
  ce:	3b 85       	ldd	r19, Y+11	; 0x0b
  d0:	21 30       	cpi	r18, 0x01	; 1
  d2:	31 05       	cpc	r19, r1
  d4:	b1 f0       	breq	.+44     	; 0x102 <DIO_enuWritePin+0x68>
  d6:	29 c0       	rjmp	.+82     	; 0x12a <DIO_enuWritePin+0x90>
		{
			case 0:
			   CLR_BIT(ODRA , u8PinNumCpy);
  d8:	ab e3       	ldi	r26, 0x3B	; 59
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_enuWritePin+0x5c>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_enuWritePin+0x58>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	eb c0       	rjmp	.+470    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRA , u8PinNumCpy);
 102:	ab e3       	ldi	r26, 0x3B	; 59
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_enuWritePin+0x86>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_enuWritePin+0x82>
 124:	84 2b       	or	r24, r20
 126:	8c 93       	st	X, r24
 128:	d7 c0       	rjmp	.+430    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	d4 c0       	rjmp	.+424    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
		}
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	08 f4       	brcc	.+2      	; 0x138 <DIO_enuWritePin+0x9e>
 136:	42 c0       	rjmp	.+132    	; 0x1bc <DIO_enuWritePin+0x122>
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	80 31       	cpi	r24, 0x10	; 16
 13c:	08 f0       	brcs	.+2      	; 0x140 <DIO_enuWritePin+0xa6>
 13e:	3e c0       	rjmp	.+124    	; 0x1bc <DIO_enuWritePin+0x122>
	{
		// ODRB === PORTB
		u8PinNumCpy = u8PinNumCpy % 8 ;	
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	87 70       	andi	r24, 0x07	; 7
 144:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	39 87       	std	Y+9, r19	; 0x09
 14e:	28 87       	std	Y+8, r18	; 0x08
 150:	88 85       	ldd	r24, Y+8	; 0x08
 152:	99 85       	ldd	r25, Y+9	; 0x09
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	31 f0       	breq	.+12     	; 0x164 <DIO_enuWritePin+0xca>
 158:	28 85       	ldd	r18, Y+8	; 0x08
 15a:	39 85       	ldd	r19, Y+9	; 0x09
 15c:	21 30       	cpi	r18, 0x01	; 1
 15e:	31 05       	cpc	r19, r1
 160:	b1 f0       	breq	.+44     	; 0x18e <DIO_enuWritePin+0xf4>
 162:	29 c0       	rjmp	.+82     	; 0x1b6 <DIO_enuWritePin+0x11c>
		{
			case 0:
			   CLR_BIT(ODRB , u8PinNumCpy);
 164:	a8 e3       	ldi	r26, 0x38	; 56
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e8 e3       	ldi	r30, 0x38	; 56
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	48 2f       	mov	r20, r24
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 2e       	mov	r0, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_enuWritePin+0xe8>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_enuWritePin+0xe4>
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	8c 93       	st	X, r24
 18c:	a5 c0       	rjmp	.+330    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRB , u8PinNumCpy);
 18e:	a8 e3       	ldi	r26, 0x38	; 56
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e8 e3       	ldi	r30, 0x38	; 56
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 2e       	mov	r0, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_enuWritePin+0x112>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_enuWritePin+0x10e>
 1b0:	84 2b       	or	r24, r20
 1b2:	8c 93       	st	X, r24
 1b4:	91 c0       	rjmp	.+290    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	8e c0       	rjmp	.+284    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
		}
	
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	80 31       	cpi	r24, 0x10	; 16
 1c0:	08 f4       	brcc	.+2      	; 0x1c4 <DIO_enuWritePin+0x12a>
 1c2:	42 c0       	rjmp	.+132    	; 0x248 <DIO_enuWritePin+0x1ae>
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	88 31       	cpi	r24, 0x18	; 24
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <DIO_enuWritePin+0x132>
 1ca:	3e c0       	rjmp	.+124    	; 0x248 <DIO_enuWritePin+0x1ae>
	{
		// ODRC === PORTC
		u8PinNumCpy = u8PinNumCpy %8 ;	
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	87 70       	andi	r24, 0x07	; 7
 1d0:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	28 2f       	mov	r18, r24
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	3f 83       	std	Y+7, r19	; 0x07
 1da:	2e 83       	std	Y+6, r18	; 0x06
 1dc:	8e 81       	ldd	r24, Y+6	; 0x06
 1de:	9f 81       	ldd	r25, Y+7	; 0x07
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <DIO_enuWritePin+0x156>
 1e4:	2e 81       	ldd	r18, Y+6	; 0x06
 1e6:	3f 81       	ldd	r19, Y+7	; 0x07
 1e8:	21 30       	cpi	r18, 0x01	; 1
 1ea:	31 05       	cpc	r19, r1
 1ec:	b1 f0       	breq	.+44     	; 0x21a <DIO_enuWritePin+0x180>
 1ee:	29 c0       	rjmp	.+82     	; 0x242 <DIO_enuWritePin+0x1a8>
		{
			case 0:
			   CLR_BIT(ODRC , u8PinNumCpy);
 1f0:	a5 e3       	ldi	r26, 0x35	; 53
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e5 e3       	ldi	r30, 0x35	; 53
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_enuWritePin+0x174>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_enuWritePin+0x170>
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	8c 93       	st	X, r24
 218:	5f c0       	rjmp	.+190    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRC , u8PinNumCpy);
 21a:	a5 e3       	ldi	r26, 0x35	; 53
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e5 e3       	ldi	r30, 0x35	; 53
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_enuWritePin+0x19e>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_enuWritePin+0x19a>
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
 240:	4b c0       	rjmp	.+150    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	48 c0       	rjmp	.+144    	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
		}
	
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 31       	cpi	r24, 0x18	; 24
 24c:	08 f4       	brcc	.+2      	; 0x250 <DIO_enuWritePin+0x1b6>
 24e:	42 c0       	rjmp	.+132    	; 0x2d4 <DIO_enuWritePin+0x23a>
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	80 32       	cpi	r24, 0x20	; 32
 254:	08 f0       	brcs	.+2      	; 0x258 <DIO_enuWritePin+0x1be>
 256:	3e c0       	rjmp	.+124    	; 0x2d4 <DIO_enuWritePin+0x23a>
	{
		// ODRD === PORTD
		u8PinNumCpy = u8PinNumCpy % 8 ;	
 258:	8a 81       	ldd	r24, Y+2	; 0x02
 25a:	87 70       	andi	r24, 0x07	; 7
 25c:	8a 83       	std	Y+2, r24	; 0x02
		switch(u8PinValCpy)
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	3d 83       	std	Y+5, r19	; 0x05
 266:	2c 83       	std	Y+4, r18	; 0x04
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	9d 81       	ldd	r25, Y+5	; 0x05
 26c:	00 97       	sbiw	r24, 0x00	; 0
 26e:	31 f0       	breq	.+12     	; 0x27c <DIO_enuWritePin+0x1e2>
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	3d 81       	ldd	r19, Y+5	; 0x05
 274:	21 30       	cpi	r18, 0x01	; 1
 276:	31 05       	cpc	r19, r1
 278:	b1 f0       	breq	.+44     	; 0x2a6 <DIO_enuWritePin+0x20c>
 27a:	29 c0       	rjmp	.+82     	; 0x2ce <DIO_enuWritePin+0x234>
		{
			case 0:
			   CLR_BIT(ODRD , u8PinNumCpy);
 27c:	a2 e3       	ldi	r26, 0x32	; 50
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e2 e3       	ldi	r30, 0x32	; 50
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuWritePin+0x200>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuWritePin+0x1fc>
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	8c 93       	st	X, r24
 2a4:	19 c0       	rjmp	.+50     	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			case 1:
			   SET_BIT(ODRD , u8PinNumCpy);
 2a6:	a2 e3       	ldi	r26, 0x32	; 50
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e2 e3       	ldi	r30, 0x32	; 50
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_enuWritePin+0x22a>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_enuWritePin+0x226>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <DIO_enuWritePin+0x23e>
			break ;
			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_enuWritePin+0x23e>
		}
	
	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuErrorLoc ;
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 2da:	2b 96       	adiw	r28, 0x0b	; 11
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	08 95       	ret

000002ec <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValCpy)
{
 2ec:	df 93       	push	r29
 2ee:	cf 93       	push	r28
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <DIO_enuReadPin+0x6>
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <DIO_enuReadPin+0x8>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	8a 83       	std	Y+2, r24	; 0x02
 2fa:	7c 83       	std	Y+4, r23	; 0x04
 2fc:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorLoc = E_OK;
 2fe:	19 82       	std	Y+1, r1	; 0x01

	if (u8PinNumCpy >=0 && u8PinNumCpy <=7)
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	88 30       	cpi	r24, 0x08	; 8
 304:	a0 f4       	brcc	.+40     	; 0x32e <DIO_enuReadPin+0x42>
	{
		// IDRA
		*pu8PinValCpy = GET_BIT(IDRA , u8PinNumCpy);
 306:	e9 e3       	ldi	r30, 0x39	; 57
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	88 2f       	mov	r24, r24
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	a9 01       	movw	r20, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_enuReadPin+0x32>
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_enuReadPin+0x2e>
 322:	ca 01       	movw	r24, r20
 324:	81 70       	andi	r24, 0x01	; 1
 326:	eb 81       	ldd	r30, Y+3	; 0x03
 328:	fc 81       	ldd	r31, Y+4	; 0x04
 32a:	80 83       	st	Z, r24
 32c:	59 c0       	rjmp	.+178    	; 0x3e0 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	d0 f0       	brcs	.+52     	; 0x368 <DIO_enuReadPin+0x7c>
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	b8 f4       	brcc	.+46     	; 0x368 <DIO_enuReadPin+0x7c>
	{
		// IDRB
		u8PinNumCpy = u8PinNumCpy %8 ;
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	87 70       	andi	r24, 0x07	; 7
 33e:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRB , u8PinNumCpy);
 340:	e6 e3       	ldi	r30, 0x36	; 54
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 2f       	mov	r24, r24
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	a9 01       	movw	r20, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_enuReadPin+0x6c>
 354:	55 95       	asr	r21
 356:	47 95       	ror	r20
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_enuReadPin+0x68>
 35c:	ca 01       	movw	r24, r20
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	eb 81       	ldd	r30, Y+3	; 0x03
 362:	fc 81       	ldd	r31, Y+4	; 0x04
 364:	80 83       	st	Z, r24
 366:	3c c0       	rjmp	.+120    	; 0x3e0 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	80 31       	cpi	r24, 0x10	; 16
 36c:	d0 f0       	brcs	.+52     	; 0x3a2 <DIO_enuReadPin+0xb6>
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	88 31       	cpi	r24, 0x18	; 24
 372:	b8 f4       	brcc	.+46     	; 0x3a2 <DIO_enuReadPin+0xb6>
	{
		// IDRC
		u8PinNumCpy = u8PinNumCpy %8 ;
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	87 70       	andi	r24, 0x07	; 7
 378:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRC , u8PinNumCpy);
 37a:	e3 e3       	ldi	r30, 0x33	; 51
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	a9 01       	movw	r20, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_enuReadPin+0xa6>
 38e:	55 95       	asr	r21
 390:	47 95       	ror	r20
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_enuReadPin+0xa2>
 396:	ca 01       	movw	r24, r20
 398:	81 70       	andi	r24, 0x01	; 1
 39a:	eb 81       	ldd	r30, Y+3	; 0x03
 39c:	fc 81       	ldd	r31, Y+4	; 0x04
 39e:	80 83       	st	Z, r24
 3a0:	1f c0       	rjmp	.+62     	; 0x3e0 <DIO_enuReadPin+0xf4>
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	88 31       	cpi	r24, 0x18	; 24
 3a6:	d0 f0       	brcs	.+52     	; 0x3dc <DIO_enuReadPin+0xf0>
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	80 32       	cpi	r24, 0x20	; 32
 3ac:	b8 f4       	brcc	.+46     	; 0x3dc <DIO_enuReadPin+0xf0>
	{
		// IDRD
		u8PinNumCpy = u8PinNumCpy %8 ;
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	87 70       	andi	r24, 0x07	; 7
 3b2:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRD , u8PinNumCpy);
 3b4:	e0 e3       	ldi	r30, 0x30	; 48
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	a9 01       	movw	r20, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_enuReadPin+0xe0>
 3c8:	55 95       	asr	r21
 3ca:	47 95       	ror	r20
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_enuReadPin+0xdc>
 3d0:	ca 01       	movw	r24, r20
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	eb 81       	ldd	r30, Y+3	; 0x03
 3d6:	fc 81       	ldd	r31, Y+4	; 0x04
 3d8:	80 83       	st	Z, r24
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_enuReadPin+0xf4>
	}
	else 
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuErrorLoc ;
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	08 95       	ret

000003f0 <DIO_enuActivPull>:
tenuErrorStatus DIO_enuActivPull(uint8 u8PinNumCpy , uint8 u8ResStatsCpy)
{
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <DIO_enuActivPull+0x6>
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enuWritePin(u8PinNumCpy,u8ResStatsCpy);
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	6a 81       	ldd	r22, Y+2	; 0x02
 402:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
}
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <main>:
void MotorsRight(void);
void MotorsLeft(void);
void MotorsForward(void);

int main()
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	00 d0       	rcall	.+0      	; 0x416 <main+0x6>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
 41a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vidInit>
	DIO_enuActivPull(16, 1);
 41e:	80 e1       	ldi	r24, 0x10	; 16
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_enuActivPull>
	DIO_enuActivPull(17, 1);
 426:	81 e1       	ldi	r24, 0x11	; 17
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_enuActivPull>

	uint8 u8Switch1StateLoc = 0;
 42e:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Switch2StateLoc = 0;
 430:	1a 82       	std	Y+2, r1	; 0x02

	while(1)
	{
		DIO_enuReadPin(17, &u8Switch1StateLoc);
 432:	81 e1       	ldi	r24, 0x11	; 17
 434:	9e 01       	movw	r18, r28
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	b9 01       	movw	r22, r18
 43c:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_enuReadPin>
		DIO_enuReadPin(16, &u8Switch2StateLoc);
 440:	9e 01       	movw	r18, r28
 442:	2e 5f       	subi	r18, 0xFE	; 254
 444:	3f 4f       	sbci	r19, 0xFF	; 255
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	b9 01       	movw	r22, r18
 44a:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_enuReadPin>

		 if (u8Switch1StateLoc == 0 && u8Switch2StateLoc == 1)
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	88 23       	and	r24, r24
 452:	31 f4       	brne	.+12     	; 0x460 <__stack+0x1>
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	19 f4       	brne	.+6      	; 0x460 <__stack+0x1>
		 {
			MotorsForward();
 45a:	0e 94 8a 02 	call	0x514	; 0x514 <MotorsForward>
 45e:	e9 cf       	rjmp	.-46     	; 0x432 <main+0x22>
		 }
		 else if (u8Switch1StateLoc == 1 && u8Switch2StateLoc == 0)
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	31 f4       	brne	.+12     	; 0x472 <__stack+0x13>
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	88 23       	and	r24, r24
 46a:	19 f4       	brne	.+6      	; 0x472 <__stack+0x13>
		 {
			MotorsLeft();
 46c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <MotorsLeft>
 470:	e0 cf       	rjmp	.-64     	; 0x432 <main+0x22>
		 }
		 else if (u8Switch1StateLoc == 0 && u8Switch2StateLoc == 0)
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 23       	and	r24, r24
 476:	31 f4       	brne	.+12     	; 0x484 <__stack+0x25>
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 23       	and	r24, r24
 47c:	19 f4       	brne	.+6      	; 0x484 <__stack+0x25>
		 {
			MotorsRight();
 47e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MotorsRight>
 482:	d7 cf       	rjmp	.-82     	; 0x432 <main+0x22>
		 }
		 else
		 {
			MotorsStop();
 484:	0e 94 45 02 	call	0x48a	; 0x48a <MotorsStop>
 488:	d4 cf       	rjmp	.-88     	; 0x432 <main+0x22>

0000048a <MotorsStop>:

	return 0;
}

void MotorsStop(void)
{
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(0, 0);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(1, 0);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(2, 0);
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(3, 0);
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
}
 4b2:	cf 91       	pop	r28
 4b4:	df 91       	pop	r29
 4b6:	08 95       	ret

000004b8 <MotorsRight>:
void MotorsRight(void)
{
 4b8:	df 93       	push	r29
 4ba:	cf 93       	push	r28
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(0, 1);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(1, 0);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(2, 0);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(3, 1);
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
}
 4e0:	cf 91       	pop	r28
 4e2:	df 91       	pop	r29
 4e4:	08 95       	ret

000004e6 <MotorsLeft>:
void MotorsLeft(void)
{
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(0, 0);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(1, 1);
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(2, 1);
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(3, 0);
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
}
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <MotorsForward>:
void MotorsForward(void)
{
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuWritePin(0, 0);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(1, 1);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(2, 0);
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
	DIO_enuWritePin(3, 1);
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_enuWritePin>
}
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
