
Task_12_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00002cf0  00002d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800092  00800092  00002db6  2**0
                  ALLOC
  3 .stab         00002508  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bf  00000000  00000000  000052c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000657f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000682f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009363  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a110  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a270  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000accb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 13 	call	0x2662	; 0x2662 <main>
      8a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vidInit>:
#include "DIO_cnfg.h"
#include "DIO_priv.h"


void DIO_vidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

  DDRA = Conc(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
  DDRB = Conc(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
  DDRC = Conc(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 ef       	ldi	r24, 0xF0	; 240
     b64:	80 83       	st	Z, r24
  DDRD = Conc(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8b ef       	ldi	r24, 0xFB	; 251
     b6c:	80 83       	st	Z, r24


}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enumWritePin>:
/********************************************************/
/*u8PinNumCpy: 0--7 (A)  8--15 (B) 16 --23 (C)24--31 (D)*/
/********************************************************/
tenuErrorStatus DIO_enumWritePin(uint8 u8PinNumCpy , uint8 u8PinValCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2b 97       	sbiw	r28, 0x0b	; 11
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuErrorLoc = E_OK ;
     b8c:	19 82       	std	Y+1, r1	; 0x01

	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	d8 f5       	brcc	.+118    	; 0xc0a <DIO_enumWritePin+0x96>
	{
		// ODRA === PORTA  1101 0000
		switch(u8PinValCpy)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <DIO_enumWritePin+0x3e>
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	b1 f0       	breq	.+44     	; 0xbdc <DIO_enumWritePin+0x68>
     bb0:	29 c0       	rjmp	.+82     	; 0xc04 <DIO_enumWritePin+0x90>
		{
			case 0:
			   CLEAR_BIT(ODRA , u8PinNumCpy);
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_enumWritePin+0x5c>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_enumWritePin+0x58>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	eb c0       	rjmp	.+470    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRA , u8PinNumCpy);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_enumWritePin+0x86>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_enumWritePin+0x82>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	d7 c0       	rjmp	.+430    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	d4 c0       	rjmp	.+424    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 30       	cpi	r24, 0x08	; 8
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <DIO_enumWritePin+0x9e>
     c10:	42 c0       	rjmp	.+132    	; 0xc96 <DIO_enumWritePin+0x122>
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	08 f0       	brcs	.+2      	; 0xc1a <DIO_enumWritePin+0xa6>
     c18:	3e c0       	rjmp	.+124    	; 0xc96 <DIO_enumWritePin+0x122>
	{
		// ODRB === PORTB
		u8PinNumCpy = u8PinNumCpy % 8;
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	39 87       	std	Y+9, r19	; 0x09
     c28:	28 87       	std	Y+8, r18	; 0x08
     c2a:	88 85       	ldd	r24, Y+8	; 0x08
     c2c:	99 85       	ldd	r25, Y+9	; 0x09
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	31 f0       	breq	.+12     	; 0xc3e <DIO_enumWritePin+0xca>
     c32:	28 85       	ldd	r18, Y+8	; 0x08
     c34:	39 85       	ldd	r19, Y+9	; 0x09
     c36:	21 30       	cpi	r18, 0x01	; 1
     c38:	31 05       	cpc	r19, r1
     c3a:	b1 f0       	breq	.+44     	; 0xc68 <DIO_enumWritePin+0xf4>
     c3c:	29 c0       	rjmp	.+82     	; 0xc90 <DIO_enumWritePin+0x11c>
		{
			case 0:
			   CLEAR_BIT(ODRB , u8PinNumCpy);
     c3e:	a8 e3       	ldi	r26, 0x38	; 56
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e8 e3       	ldi	r30, 0x38	; 56
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_enumWritePin+0xe8>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_enumWritePin+0xe4>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	a5 c0       	rjmp	.+330    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRB , u8PinNumCpy);
     c68:	a8 e3       	ldi	r26, 0x38	; 56
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e3       	ldi	r30, 0x38	; 56
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_enumWritePin+0x112>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_enumWritePin+0x10e>
     c8a:	84 2b       	or	r24, r20
     c8c:	8c 93       	st	X, r24
     c8e:	91 c0       	rjmp	.+290    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	8e c0       	rjmp	.+284    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}

	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	80 31       	cpi	r24, 0x10	; 16
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <DIO_enumWritePin+0x12a>
     c9c:	42 c0       	rjmp	.+132    	; 0xd22 <DIO_enumWritePin+0x1ae>
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	88 31       	cpi	r24, 0x18	; 24
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <DIO_enumWritePin+0x132>
     ca4:	3e c0       	rjmp	.+124    	; 0xd22 <DIO_enumWritePin+0x1ae>
	{
		// ODRC === PORTC
		u8PinNumCpy = u8PinNumCpy %8 ;
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	87 70       	andi	r24, 0x07	; 7
     caa:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3f 83       	std	Y+7, r19	; 0x07
     cb4:	2e 83       	std	Y+6, r18	; 0x06
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <DIO_enumWritePin+0x156>
     cbe:	2e 81       	ldd	r18, Y+6	; 0x06
     cc0:	3f 81       	ldd	r19, Y+7	; 0x07
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	b1 f0       	breq	.+44     	; 0xcf4 <DIO_enumWritePin+0x180>
     cc8:	29 c0       	rjmp	.+82     	; 0xd1c <DIO_enumWritePin+0x1a8>
		{
			case 0:
			   CLEAR_BIT(ODRC , u8PinNumCpy);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_enumWritePin+0x174>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_enumWritePin+0x170>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	5f c0       	rjmp	.+190    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRC , u8PinNumCpy);
     cf4:	a5 e3       	ldi	r26, 0x35	; 53
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e5 e3       	ldi	r30, 0x35	; 53
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_enumWritePin+0x19e>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_enumWritePin+0x19a>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	4b c0       	rjmp	.+150    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	48 c0       	rjmp	.+144    	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;
		}

	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	88 31       	cpi	r24, 0x18	; 24
     d26:	08 f4       	brcc	.+2      	; 0xd2a <DIO_enumWritePin+0x1b6>
     d28:	42 c0       	rjmp	.+132    	; 0xdae <DIO_enumWritePin+0x23a>
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	80 32       	cpi	r24, 0x20	; 32
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <DIO_enumWritePin+0x1be>
     d30:	3e c0       	rjmp	.+124    	; 0xdae <DIO_enumWritePin+0x23a>
	{
		// ODRD === PORTD
		u8PinNumCpy = u8PinNumCpy % 8 ;
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	8a 83       	std	Y+2, r24	; 0x02

		switch(u8PinValCpy)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2c 83       	std	Y+4, r18	; 0x04
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <DIO_enumWritePin+0x1e2>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	b1 f0       	breq	.+44     	; 0xd80 <DIO_enumWritePin+0x20c>
     d54:	29 c0       	rjmp	.+82     	; 0xda8 <DIO_enumWritePin+0x234>
		{
			case 0:
			   CLEAR_BIT(ODRD , u8PinNumCpy);
     d56:	a2 e3       	ldi	r26, 0x32	; 50
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e2 e3       	ldi	r30, 0x32	; 50
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_enumWritePin+0x200>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_enumWritePin+0x1fc>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	19 c0       	rjmp	.+50     	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			case 1:
			   SET_BIT(ODRD , u8PinNumCpy);
     d80:	a2 e3       	ldi	r26, 0x32	; 50
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e3       	ldi	r30, 0x32	; 50
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_enumWritePin+0x22a>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_enumWritePin+0x226>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <DIO_enumWritePin+0x23e>
			break ;

			default :
			enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_enumWritePin+0x23e>
		}

	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE;
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorLoc ;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
}
     db4:	2b 96       	adiw	r28, 0x0b	; 11
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <DIO_enumReadPin>:

tenuErrorStatus DIO_enumReadPin(uint8 u8PinNumCpy , uint8 * pu8PinValCpy)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <DIO_enumReadPin+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_enumReadPin+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	7c 83       	std	Y+4, r23	; 0x04
     dd6:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorLoc = E_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01

	if (u8PinNumCpy>=0 && u8PinNumCpy<=7)
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	a0 f4       	brcc	.+40     	; 0xe08 <DIO_enumReadPin+0x42>
	{
		// IDRA
		*pu8PinValCpy = GET_BIT(IDRA , u8PinNumCpy);
     de0:	e9 e3       	ldi	r30, 0x39	; 57
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_enumReadPin+0x32>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_enumReadPin+0x2e>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	80 83       	st	Z, r24
     e06:	59 c0       	rjmp	.+178    	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=8 && u8PinNumCpy<=15)
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	d0 f0       	brcs	.+52     	; 0xe42 <DIO_enumReadPin+0x7c>
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 31       	cpi	r24, 0x10	; 16
     e12:	b8 f4       	brcc	.+46     	; 0xe42 <DIO_enumReadPin+0x7c>
	{
		// IDRB
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	87 70       	andi	r24, 0x07	; 7
     e18:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRB , u8PinNumCpy);
     e1a:	e6 e3       	ldi	r30, 0x36	; 54
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_enumReadPin+0x6c>
     e2e:	55 95       	asr	r21
     e30:	47 95       	ror	r20
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_enumReadPin+0x68>
     e36:	ca 01       	movw	r24, r20
     e38:	81 70       	andi	r24, 0x01	; 1
     e3a:	eb 81       	ldd	r30, Y+3	; 0x03
     e3c:	fc 81       	ldd	r31, Y+4	; 0x04
     e3e:	80 83       	st	Z, r24
     e40:	3c c0       	rjmp	.+120    	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=16 && u8PinNumCpy<=23)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	80 31       	cpi	r24, 0x10	; 16
     e46:	d0 f0       	brcs	.+52     	; 0xe7c <DIO_enumReadPin+0xb6>
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 31       	cpi	r24, 0x18	; 24
     e4c:	b8 f4       	brcc	.+46     	; 0xe7c <DIO_enumReadPin+0xb6>
	{
		// IDRC
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	87 70       	andi	r24, 0x07	; 7
     e52:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRC , u8PinNumCpy);
     e54:	e3 e3       	ldi	r30, 0x33	; 51
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a9 01       	movw	r20, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enumReadPin+0xa6>
     e68:	55 95       	asr	r21
     e6a:	47 95       	ror	r20
     e6c:	8a 95       	dec	r24
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_enumReadPin+0xa2>
     e70:	ca 01       	movw	r24, r20
     e72:	81 70       	andi	r24, 0x01	; 1
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	80 83       	st	Z, r24
     e7a:	1f c0       	rjmp	.+62     	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else if (u8PinNumCpy>=24 && u8PinNumCpy<=31)
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	88 31       	cpi	r24, 0x18	; 24
     e80:	d0 f0       	brcs	.+52     	; 0xeb6 <DIO_enumReadPin+0xf0>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 32       	cpi	r24, 0x20	; 32
     e86:	b8 f4       	brcc	.+46     	; 0xeb6 <DIO_enumReadPin+0xf0>
	{
		// IDRD
		u8PinNumCpy = u8PinNumCpy % 8 ;
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	8a 83       	std	Y+2, r24	; 0x02
		*pu8PinValCpy = GET_BIT(IDRD , u8PinNumCpy);
     e8e:	e0 e3       	ldi	r30, 0x30	; 48
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_enumReadPin+0xe0>
     ea2:	55 95       	asr	r21
     ea4:	47 95       	ror	r20
     ea6:	8a 95       	dec	r24
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_enumReadPin+0xdc>
     eaa:	ca 01       	movw	r24, r20
     eac:	81 70       	andi	r24, 0x01	; 1
     eae:	eb 81       	ldd	r30, Y+3	; 0x03
     eb0:	fc 81       	ldd	r31, Y+4	; 0x04
     eb2:	80 83       	st	Z, r24
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_enumReadPin+0xf4>
	}
	else
	{
		enuErrorLoc = E_NOK_PARM_OUT_OF_RANGE ;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuErrorLoc ;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_enuActivePullUp>:

tenuErrorStatus DIO_enuActivePullUp(uint8 u8pinNumCpy, uint8 u8ResStatusCpy)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_enuActivePullUp+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_enumWritePin(u8pinNumCpy, u8ResStatusCpy);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	6a 81       	ldd	r22, Y+2	; 0x02
     edc:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <stup>:
#include "EXT0.h"
#include "EXT0_cnfg.h"
#include "EXT0_priv.h"

void stup (void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Empty function to handle the issue of wild pointer if the global interrupts
	 * if they are initialized before anything else
	*/
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <EXT0_vidInit>:

static pf EXT0_x = stup;

void EXT0_vidInit(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(MCUCR, 1);
		SET_BIT(MCUCR, 0);
	}
	else if (EXT0_SENSE_CTR == EXT0_FALLING)
	{
		SET_BIT(MCUCR, 1);
     f00:	a5 e5       	ldi	r26, 0x55	; 85
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e5       	ldi	r30, 0x55	; 85
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, 0);
     f0e:	a5 e5       	ldi	r26, 0x55	; 85
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e5       	ldi	r30, 0x55	; 85
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
	{
		SET_BIT(MCUCR, 1);
		SET_BIT(MCUCR, 0);
	}

}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <EXT0_vidChangeSense>:

void EXT0_vidChangeSense(uint8 u8FormCpy)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <EXT0_vidChangeSense+0x6>
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8FormCpy)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3b 83       	std	Y+3, r19	; 0x03
     f38:	2a 83       	std	Y+2, r18	; 0x02
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	21 f1       	breq	.+72     	; 0xf8c <EXT0_vidChangeSense+0x6a>
     f44:	2a 81       	ldd	r18, Y+2	; 0x02
     f46:	3b 81       	ldd	r19, Y+3	; 0x03
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <EXT0_vidChangeSense+0x36>
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	9b 81       	ldd	r25, Y+3	; 0x03
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <EXT0_vidChangeSense+0x4c>
     f56:	46 c0       	rjmp	.+140    	; 0xfe4 <EXT0_vidChangeSense+0xc2>
     f58:	2a 81       	ldd	r18, Y+2	; 0x02
     f5a:	3b 81       	ldd	r19, Y+3	; 0x03
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	21 f1       	breq	.+72     	; 0xfaa <EXT0_vidChangeSense+0x88>
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	71 f1       	breq	.+92     	; 0xfc8 <EXT0_vidChangeSense+0xa6>
     f6c:	3b c0       	rjmp	.+118    	; 0xfe4 <EXT0_vidChangeSense+0xc2>
	{
		case EXT0_RISING:
		SET_BIT(MCUCR , 1);
     f6e:	a5 e5       	ldi	r26, 0x55	; 85
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e5       	ldi	r30, 0x55	; 85
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 0);
     f7c:	a5 e5       	ldi	r26, 0x55	; 85
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e5       	ldi	r30, 0x55	; 85
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	8c 93       	st	X, r24
     f8a:	2c c0       	rjmp	.+88     	; 0xfe4 <EXT0_vidChangeSense+0xc2>
		break;

		case EXT0_FALLING:
		SET_BIT(MCUCR , 1);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 0);
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	8c 93       	st	X, r24
     fa8:	1d c0       	rjmp	.+58     	; 0xfe4 <EXT0_vidChangeSense+0xc2>
		break;

		case EXT0_IOC:
		CLEAR_BIT(MCUCR , 1);
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
		SET_BIT(MCUCR , 0);
     fb8:	a5 e5       	ldi	r26, 0x55	; 85
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e5       	ldi	r30, 0x55	; 85
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	8c 93       	st	X, r24
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <EXT0_vidChangeSense+0xc2>
		break;

		case EXT0_LOW_LEVEL:
		CLEAR_BIT(MCUCR , 1);
     fc8:	a5 e5       	ldi	r26, 0x55	; 85
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e5       	ldi	r30, 0x55	; 85
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR , 0);
     fd6:	a5 e5       	ldi	r26, 0x55	; 85
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e5       	ldi	r30, 0x55	; 85
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	8c 93       	st	X, r24
		break;

	}
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <EXT0_vidIntEnable>:

void EXT0_vidIntEnable(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, 6);
     ff8:	ab e5       	ldi	r26, 0x5B	; 91
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e5       	ldi	r30, 0x5B	; 91
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	8c 93       	st	X, r24
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <EXT0_vidIntDisable>:
void EXT0_vidIntDisable(void)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, 6);
    1014:	ab e5       	ldi	r26, 0x5B	; 91
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e5       	ldi	r30, 0x5B	; 91
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7b       	andi	r24, 0xBF	; 191
    1020:	8c 93       	st	X, r24
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <EXT0_vidSetCallback>:

void EXT0_vidSetCallback(pf pfCallbackCpy)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <EXT0_vidSetCallback+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
	EXT0_x = pfCallbackCpy ;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	90 93 69 00 	sts	0x0069, r25
    103e:	80 93 68 00 	sts	0x0068, r24
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <__vector_1>:

void __vector_1 (void) __attribute__ ((signal,used));
void __vector_1 (void)
{
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	2f 93       	push	r18
    1058:	3f 93       	push	r19
    105a:	4f 93       	push	r20
    105c:	5f 93       	push	r21
    105e:	6f 93       	push	r22
    1060:	7f 93       	push	r23
    1062:	8f 93       	push	r24
    1064:	9f 93       	push	r25
    1066:	af 93       	push	r26
    1068:	bf 93       	push	r27
    106a:	ef 93       	push	r30
    106c:	ff 93       	push	r31
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	EXT0_x();
    1076:	e0 91 68 00 	lds	r30, 0x0068
    107a:	f0 91 69 00 	lds	r31, 0x0069
    107e:	09 95       	icall
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	7f 91       	pop	r23
    1092:	6f 91       	pop	r22
    1094:	5f 91       	pop	r21
    1096:	4f 91       	pop	r20
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <GIE_vidEnable>:
#include "GIE.h"

#define SREG  *((volatile uint8 *) 0x5F)

void GIE_vidEnable(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
    10ae:	af e5       	ldi	r26, 0x5F	; 95
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e5       	ldi	r30, 0x5F	; 95
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 68       	ori	r24, 0x80	; 128
    10ba:	8c 93       	st	X, r24
}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <GIE_vidDisable>:
void GIE_vidDisable(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG , 7);
    10ca:	af e5       	ldi	r26, 0x5F	; 95
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ef e5       	ldi	r30, 0x5F	; 95
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 77       	andi	r24, 0x7F	; 127
    10d6:	8c 93       	st	X, r24
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <KEYPAD_voidInit>:

static void SendSeq(uint8 u8SeqNumCpy, uint8 u8KeypadIndxCpy);
static uint8 SendCheckInput(uint8 u8KeypadIndxCpy);

void KEYPAD_voidInit(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <KEYPAD_voidInit+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* loop all kepayd available */
	/* activate pullup resistor for input row pins*/
	uint8 u8AvaKeypadCntrLoc;
	uint8 u8InputCntrLoc;

	for (u8AvaKeypadCntrLoc = 0; u8AvaKeypadCntrLoc < KEYPAD_MAX_NUM; ++u8AvaKeypadCntrLoc)
    10e8:	1a 82       	std	Y+2, r1	; 0x02
    10ea:	35 c0       	rjmp	.+106    	; 0x1156 <KEYPAD_voidInit+0x78>
	{
		for (u8InputCntrLoc = 0; u8InputCntrLoc < KEYPAD_astrConfigSet[u8AvaKeypadCntrLoc].u8RowInputNum; ++u8InputCntrLoc)
    10ec:	19 82       	std	Y+1, r1	; 0x01
    10ee:	1c c0       	rjmp	.+56     	; 0x1128 <KEYPAD_voidInit+0x4a>
		{
			DIO_enuActivePullUp(KEYPAD_astrConfigSet[u8AvaKeypadCntrLoc].au8RowInputDioConc[u8InputCntrLoc], 1);
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	48 2f       	mov	r20, r24
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a e1       	ldi	r24, 0x1A	; 26
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	46 9f       	mul	r20, r22
    1104:	c0 01       	movw	r24, r0
    1106:	47 9f       	mul	r20, r23
    1108:	90 0d       	add	r25, r0
    110a:	56 9f       	mul	r21, r22
    110c:	90 0d       	add	r25, r0
    110e:	11 24       	eor	r1, r1
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	e4 59       	subi	r30, 0x94	; 148
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_enuActivePullUp>
	uint8 u8AvaKeypadCntrLoc;
	uint8 u8InputCntrLoc;

	for (u8AvaKeypadCntrLoc = 0; u8AvaKeypadCntrLoc < KEYPAD_MAX_NUM; ++u8AvaKeypadCntrLoc)
	{
		for (u8InputCntrLoc = 0; u8InputCntrLoc < KEYPAD_astrConfigSet[u8AvaKeypadCntrLoc].u8RowInputNum; ++u8InputCntrLoc)
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	8a e1       	ldi	r24, 0x1A	; 26
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	ac 01       	movw	r20, r24
    1134:	24 9f       	mul	r18, r20
    1136:	c0 01       	movw	r24, r0
    1138:	25 9f       	mul	r18, r21
    113a:	90 0d       	add	r25, r0
    113c:	34 9f       	mul	r19, r20
    113e:	90 0d       	add	r25, r0
    1140:	11 24       	eor	r1, r1
    1142:	fc 01       	movw	r30, r24
    1144:	e6 59       	subi	r30, 0x96	; 150
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	90 81       	ld	r25, Z
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	89 17       	cp	r24, r25
    114e:	80 f2       	brcs	.-96     	; 0x10f0 <KEYPAD_voidInit+0x12>
	/* loop all kepayd available */
	/* activate pullup resistor for input row pins*/
	uint8 u8AvaKeypadCntrLoc;
	uint8 u8InputCntrLoc;

	for (u8AvaKeypadCntrLoc = 0; u8AvaKeypadCntrLoc < KEYPAD_MAX_NUM; ++u8AvaKeypadCntrLoc)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	88 23       	and	r24, r24
    115a:	41 f2       	breq	.-112    	; 0x10ec <KEYPAD_voidInit+0xe>
		for (u8InputCntrLoc = 0; u8InputCntrLoc < KEYPAD_astrConfigSet[u8AvaKeypadCntrLoc].u8RowInputNum; ++u8InputCntrLoc)
		{
			DIO_enuActivePullUp(KEYPAD_astrConfigSet[u8AvaKeypadCntrLoc].au8RowInputDioConc[u8InputCntrLoc], 1);
		}
	}
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <KEYPAD_u8GetPressedKey>:

uint8 KEYPAD_u8GetPressedKey(uint8 u8KeypadIndxCpy)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <KEYPAD_u8GetPressedKey+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <KEYPAD_u8GetPressedKey+0x8>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	8c 83       	std	Y+4, r24	; 0x04
		// intersection seq and input row is pressed key
		// else Donothing
	// return pressed key or 0xFF in case no button pressed

	uint8 u8CntrLoc;
	uint8 u8ReturnLoc = 0xFF;
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8RowIndxLoc;

	for (u8CntrLoc = 0; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8ColOutputNum; ++u8CntrLoc)
    1178:	1b 82       	std	Y+3, r1	; 0x03
    117a:	2f c0       	rjmp	.+94     	; 0x11da <KEYPAD_u8GetPressedKey+0x74>
	{
		SendSeq(u8CntrLoc, u8KeypadIndxCpy);
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	6c 81       	ldd	r22, Y+4	; 0x04
    1180:	0e 94 0a 09 	call	0x1214	; 0x1214 <SendSeq>
		u8RowIndxLoc = SendCheckInput(u8KeypadIndxCpy);
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	0e 94 69 09 	call	0x12d2	; 0x12d2 <SendCheckInput>
    118a:	89 83       	std	Y+1, r24	; 0x01

		if (u8RowIndxLoc != 0xFF)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	09 f1       	breq	.+66     	; 0x11d4 <KEYPAD_u8GetPressedKey+0x6e>
		{
			u8ReturnLoc = KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8KeypadMatrix[u8RowIndxLoc][u8CntrLoc];
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	68 2f       	mov	r22, r24
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	48 2f       	mov	r20, r24
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	8a e1       	ldi	r24, 0x1A	; 26
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	6e 9f       	mul	r22, r30
    11b4:	c0 01       	movw	r24, r0
    11b6:	6f 9f       	mul	r22, r31
    11b8:	90 0d       	add	r25, r0
    11ba:	7e 9f       	mul	r23, r30
    11bc:	90 0d       	add	r25, r0
    11be:	11 24       	eor	r1, r1
    11c0:	82 0f       	add	r24, r18
    11c2:	93 1f       	adc	r25, r19
    11c4:	84 0f       	add	r24, r20
    11c6:	95 1f       	adc	r25, r21
    11c8:	fc 01       	movw	r30, r24
    11ca:	ec 58       	subi	r30, 0x8C	; 140
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	80 81       	ld	r24, Z
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	18 c0       	rjmp	.+48     	; 0x1204 <KEYPAD_u8GetPressedKey+0x9e>

	uint8 u8CntrLoc;
	uint8 u8ReturnLoc = 0xFF;
	uint8 u8RowIndxLoc;

	for (u8CntrLoc = 0; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8ColOutputNum; ++u8CntrLoc)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8a e1       	ldi	r24, 0x1A	; 26
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	ac 01       	movw	r20, r24
    11e6:	24 9f       	mul	r18, r20
    11e8:	c0 01       	movw	r24, r0
    11ea:	25 9f       	mul	r18, r21
    11ec:	90 0d       	add	r25, r0
    11ee:	34 9f       	mul	r19, r20
    11f0:	90 0d       	add	r25, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	fc 01       	movw	r30, r24
    11f6:	e5 59       	subi	r30, 0x95	; 149
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	90 81       	ld	r25, Z
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	89 17       	cp	r24, r25
    1200:	08 f4       	brcc	.+2      	; 0x1204 <KEYPAD_u8GetPressedKey+0x9e>
    1202:	bc cf       	rjmp	.-136    	; 0x117c <KEYPAD_u8GetPressedKey+0x16>
			u8ReturnLoc = KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8KeypadMatrix[u8RowIndxLoc][u8CntrLoc];
			break;
		}
	}

	return u8ReturnLoc;
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <SendSeq>:

static void SendSeq(uint8 u8SeqNumCpy, uint8 u8KeypadIndxCpy)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <SendSeq+0x6>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03

	uint8 u8CntrLoc;

	for (u8CntrLoc = 0; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8ColOutputNum; ++u8CntrLoc)
    1224:	19 82       	std	Y+1, r1	; 0x01
    1226:	3a c0       	rjmp	.+116    	; 0x129c <SendSeq+0x88>
	{
		if (u8SeqNumCpy == u8CntrLoc)
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	98 17       	cp	r25, r24
    122e:	d1 f4       	brne	.+52     	; 0x1264 <SendSeq+0x50>
		{
			DIO_enumWritePin(KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8ColOutputDioConc[u8CntrLoc], 0);
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	48 2f       	mov	r20, r24
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8a e1       	ldi	r24, 0x1A	; 26
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	bc 01       	movw	r22, r24
    1242:	46 9f       	mul	r20, r22
    1244:	c0 01       	movw	r24, r0
    1246:	47 9f       	mul	r20, r23
    1248:	90 0d       	add	r25, r0
    124a:	56 9f       	mul	r21, r22
    124c:	90 0d       	add	r25, r0
    124e:	11 24       	eor	r1, r1
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	e0 59       	subi	r30, 0x90	; 144
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
    1262:	19 c0       	rjmp	.+50     	; 0x1296 <SendSeq+0x82>
		}
		else
		{
			DIO_enumWritePin(KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8ColOutputDioConc[u8CntrLoc], 1);
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	48 2f       	mov	r20, r24
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8a e1       	ldi	r24, 0x1A	; 26
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	bc 01       	movw	r22, r24
    1276:	46 9f       	mul	r20, r22
    1278:	c0 01       	movw	r24, r0
    127a:	47 9f       	mul	r20, r23
    127c:	90 0d       	add	r25, r0
    127e:	56 9f       	mul	r21, r22
    1280:	90 0d       	add	r25, r0
    1282:	11 24       	eor	r1, r1
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	fc 01       	movw	r30, r24
    128a:	e0 59       	subi	r30, 0x90	; 144
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
static void SendSeq(uint8 u8SeqNumCpy, uint8 u8KeypadIndxCpy)
{

	uint8 u8CntrLoc;

	for (u8CntrLoc = 0; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8ColOutputNum; ++u8CntrLoc)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8a e1       	ldi	r24, 0x1A	; 26
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	ac 01       	movw	r20, r24
    12a8:	24 9f       	mul	r18, r20
    12aa:	c0 01       	movw	r24, r0
    12ac:	25 9f       	mul	r18, r21
    12ae:	90 0d       	add	r25, r0
    12b0:	34 9f       	mul	r19, r20
    12b2:	90 0d       	add	r25, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	fc 01       	movw	r30, r24
    12b8:	e5 59       	subi	r30, 0x95	; 149
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	90 81       	ld	r25, Z
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	89 17       	cp	r24, r25
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <SendSeq+0xb2>
    12c4:	b1 cf       	rjmp	.-158    	; 0x1228 <SendSeq+0x14>
		else
		{
			DIO_enumWritePin(KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8ColOutputDioConc[u8CntrLoc], 1);
		}
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <SendCheckInput>:

static uint8 SendCheckInput(uint8 u8KeypadIndxCpy)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <SendCheckInput+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <SendCheckInput+0x8>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	8c 83       	std	Y+4, r24	; 0x04

	uint8 u8CntrLoc ;
	uint8 u8ValLoc ;
	uint8 u8IndxRowLoc = 0xFF ;
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	89 83       	std	Y+1, r24	; 0x01

	for(u8CntrLoc = 0  ; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8RowInputNum ; u8CntrLoc++)
    12e4:	1a 82       	std	Y+2, r1	; 0x02
    12e6:	25 c0       	rjmp	.+74     	; 0x1332 <SendCheckInput+0x60>
	{
		DIO_enumReadPin(KEYPAD_astrConfigSet[u8KeypadIndxCpy].au8RowInputDioConc[u8CntrLoc], &u8ValLoc);
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	48 2f       	mov	r20, r24
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8a e1       	ldi	r24, 0x1A	; 26
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	bc 01       	movw	r22, r24
    12fa:	46 9f       	mul	r20, r22
    12fc:	c0 01       	movw	r24, r0
    12fe:	47 9f       	mul	r20, r23
    1300:	90 0d       	add	r25, r0
    1302:	56 9f       	mul	r21, r22
    1304:	90 0d       	add	r25, r0
    1306:	11 24       	eor	r1, r1
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	e4 59       	subi	r30, 0x94	; 148
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 81       	ld	r24, Z
    1314:	9e 01       	movw	r18, r28
    1316:	2d 5f       	subi	r18, 0xFD	; 253
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DIO_enumReadPin>

		if (u8ValLoc == 0)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 23       	and	r24, r24
    1324:	19 f4       	brne	.+6      	; 0x132c <SendCheckInput+0x5a>
		{
			u8IndxRowLoc = u8CntrLoc ;
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	17 c0       	rjmp	.+46     	; 0x135a <SendCheckInput+0x88>

	uint8 u8CntrLoc ;
	uint8 u8ValLoc ;
	uint8 u8IndxRowLoc = 0xFF ;

	for(u8CntrLoc = 0  ; u8CntrLoc < KEYPAD_astrConfigSet[u8KeypadIndxCpy].u8RowInputNum ; u8CntrLoc++)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8a e1       	ldi	r24, 0x1A	; 26
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	ac 01       	movw	r20, r24
    133e:	24 9f       	mul	r18, r20
    1340:	c0 01       	movw	r24, r0
    1342:	25 9f       	mul	r18, r21
    1344:	90 0d       	add	r25, r0
    1346:	34 9f       	mul	r19, r20
    1348:	90 0d       	add	r25, r0
    134a:	11 24       	eor	r1, r1
    134c:	fc 01       	movw	r30, r24
    134e:	e6 59       	subi	r30, 0x96	; 150
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	90 81       	ld	r25, Z
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	89 17       	cp	r24, r25
    1358:	38 f2       	brcs	.-114    	; 0x12e8 <SendCheckInput+0x16>
		{
			/*Do nothing*/
		}
	}

	return 	u8IndxRowLoc ;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <LCD_vidInit>:
static void WriteHelper(uint8 u8StartPin, uint8 u8lcdIndxCpy, uint8 u8DataorCmdCpy);

uint8 LCD_u84BitModFlg = 0;

void LCD_vidInit()
{
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	c0 58       	subi	r28, 0x80	; 128
    1378:	d0 40       	sbci	r29, 0x00	; 0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CmdLoc;
	uint8 u8CntrLoc = 0;
    1384:	fe 01       	movw	r30, r28
    1386:	e1 58       	subi	r30, 0x81	; 129
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	10 82       	st	Z, r1

	for(u8CntrLoc = 0 ;u8CntrLoc< LCD_MAX_NUM ; u8CntrLoc++)
    138c:	fe 01       	movw	r30, r28
    138e:	e1 58       	subi	r30, 0x81	; 129
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	10 82       	st	Z, r1
    1394:	4a c7       	rjmp	.+3732   	; 0x222a <LCD_vidInit+0xec0>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdExtCnfg.Concmode == LCD_8BIT_MODE)
    1396:	fe 01       	movw	r30, r28
    1398:	e1 58       	subi	r30, 0x81	; 129
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	c9 01       	movw	r24, r18
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	82 0f       	add	r24, r18
    13b6:	93 1f       	adc	r25, r19
    13b8:	fc 01       	movw	r30, r24
    13ba:	ec 57       	subi	r30, 0x7C	; 124
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <LCD_vidInit+0x5c>
    13c4:	52 c4       	rjmp	.+2212   	; 0x1c6a <LCD_vidInit+0x900>
    13c6:	fe 01       	movw	r30, r28
    13c8:	e5 58       	subi	r30, 0x85	; 133
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 ef       	ldi	r26, 0xF0	; 240
    13d2:	b1 e4       	ldi	r27, 0x41	; 65
    13d4:	80 83       	st	Z, r24
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	a2 83       	std	Z+2, r26	; 0x02
    13da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	8e 01       	movw	r16, r28
    13de:	09 58       	subi	r16, 0x89	; 137
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	e5 58       	subi	r30, 0x85	; 133
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a e7       	ldi	r20, 0x7A	; 122
    13f6:	53 e4       	ldi	r21, 0x43	; 67
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	f8 01       	movw	r30, r16
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140a:	fe 01       	movw	r30, r28
    140c:	e9 58       	subi	r30, 0x89	; 137
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	44 f4       	brge	.+16     	; 0x1438 <LCD_vidInit+0xce>
		__ticks = 1;
    1428:	fe 01       	movw	r30, r28
    142a:	eb 58       	subi	r30, 0x8B	; 139
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	64 c0       	rjmp	.+200    	; 0x1500 <LCD_vidInit+0x196>
	else if (__tmp > 65535)
    1438:	fe 01       	movw	r30, r28
    143a:	e9 58       	subi	r30, 0x89	; 137
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	0c f0       	brlt	.+2      	; 0x1458 <LCD_vidInit+0xee>
    1456:	43 c0       	rjmp	.+134    	; 0x14de <LCD_vidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	fe 01       	movw	r30, r28
    145a:	e5 58       	subi	r30, 0x85	; 133
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8e 01       	movw	r16, r28
    1478:	0b 58       	subi	r16, 0x8B	; 139
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	f8 01       	movw	r30, r16
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	1f c0       	rjmp	.+62     	; 0x14ce <LCD_vidInit+0x164>
    1490:	fe 01       	movw	r30, r28
    1492:	ed 58       	subi	r30, 0x8D	; 141
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	89 e1       	ldi	r24, 0x19	; 25
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149e:	fe 01       	movw	r30, r28
    14a0:	ed 58       	subi	r30, 0x8D	; 141
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_vidInit+0x13e>
    14ac:	fe 01       	movw	r30, r28
    14ae:	ed 58       	subi	r30, 0x8D	; 141
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b6:	de 01       	movw	r26, r28
    14b8:	ab 58       	subi	r26, 0x8B	; 139
    14ba:	bf 4f       	sbci	r27, 0xFF	; 255
    14bc:	fe 01       	movw	r30, r28
    14be:	eb 58       	subi	r30, 0x8B	; 139
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	fe 01       	movw	r30, r28
    14d0:	eb 58       	subi	r30, 0x8B	; 139
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	d1 f6       	brne	.-76     	; 0x1490 <LCD_vidInit+0x126>
    14dc:	27 c0       	rjmp	.+78     	; 0x152c <LCD_vidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	8e 01       	movw	r16, r28
    14e0:	0b 58       	subi	r16, 0x8B	; 139
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	e9 58       	subi	r30, 0x89	; 137
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	f8 01       	movw	r30, r16
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	de 01       	movw	r26, r28
    1502:	af 58       	subi	r26, 0x8F	; 143
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	fe 01       	movw	r30, r28
    1508:	eb 58       	subi	r30, 0x8B	; 139
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	8d 93       	st	X+, r24
    1512:	9c 93       	st	X, r25
    1514:	fe 01       	movw	r30, r28
    1516:	ef 58       	subi	r30, 0x8F	; 143
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_vidInit+0x1b4>
    1522:	fe 01       	movw	r30, r28
    1524:	ef 58       	subi	r30, 0x8F	; 143
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
		{
			_delay_ms(30);

			u8CmdLoc = 0b00110000|
    152c:	fe 01       	movw	r30, r28
    152e:	e1 58       	subi	r30, 0x81	; 129
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	c9 01       	movw	r24, r18
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
    154e:	fc 01       	movw	r30, r24
    1550:	e0 57       	subi	r30, 0x70	; 112
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	48 2f       	mov	r20, r24
    156a:	40 63       	ori	r20, 0x30	; 48
    156c:	fe 01       	movw	r30, r28
    156e:	e1 58       	subi	r30, 0x81	; 129
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	c9 01       	movw	r24, r18
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	82 0f       	add	r24, r18
    1580:	93 1f       	adc	r25, r19
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	82 0f       	add	r24, r18
    158c:	93 1f       	adc	r25, r19
    158e:	fc 01       	movw	r30, r24
    1590:	e0 57       	subi	r30, 0x70	; 112
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 81       	ld	r24, Z
    1596:	86 95       	lsr	r24
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	84 2b       	or	r24, r20
    15a8:	fe 01       	movw	r30, r28
    15aa:	e0 58       	subi	r30, 0x80	; 128
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.N_Line)<<3|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Font)<<2;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    15b0:	fe 01       	movw	r30, r28
    15b2:	e1 58       	subi	r30, 0x81	; 129
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	de 01       	movw	r26, r28
    15b8:	a0 58       	subi	r26, 0x80	; 128
    15ba:	bf 4f       	sbci	r27, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	6c 91       	ld	r22, X
    15c0:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    15c4:	fe 01       	movw	r30, r28
    15c6:	e3 59       	subi	r30, 0x93	; 147
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e8       	ldi	r26, 0x80	; 128
    15d0:	bf e3       	ldi	r27, 0x3F	; 63
    15d2:	80 83       	st	Z, r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	a2 83       	std	Z+2, r26	; 0x02
    15d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	8e 01       	movw	r16, r28
    15dc:	07 59       	subi	r16, 0x97	; 151
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	fe 01       	movw	r30, r28
    15e2:	e3 59       	subi	r30, 0x93	; 147
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a e7       	ldi	r20, 0x7A	; 122
    15f4:	53 e4       	ldi	r21, 0x43	; 67
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	f8 01       	movw	r30, r16
    1600:	80 83       	st	Z, r24
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	a2 83       	std	Z+2, r26	; 0x02
    1606:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1608:	fe 01       	movw	r30, r28
    160a:	e7 59       	subi	r30, 0x97	; 151
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	44 f4       	brge	.+16     	; 0x1636 <LCD_vidInit+0x2cc>
		__ticks = 1;
    1626:	fe 01       	movw	r30, r28
    1628:	e9 59       	subi	r30, 0x99	; 153
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	64 c0       	rjmp	.+200    	; 0x16fe <LCD_vidInit+0x394>
	else if (__tmp > 65535)
    1636:	fe 01       	movw	r30, r28
    1638:	e7 59       	subi	r30, 0x97	; 151
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	0c f0       	brlt	.+2      	; 0x1656 <LCD_vidInit+0x2ec>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <LCD_vidInit+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1656:	fe 01       	movw	r30, r28
    1658:	e3 59       	subi	r30, 0x93	; 147
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8e 01       	movw	r16, r28
    1676:	09 59       	subi	r16, 0x99	; 153
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	f8 01       	movw	r30, r16
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	1f c0       	rjmp	.+62     	; 0x16cc <LCD_vidInit+0x362>
    168e:	fe 01       	movw	r30, r28
    1690:	eb 59       	subi	r30, 0x9B	; 155
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	89 e1       	ldi	r24, 0x19	; 25
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
    169c:	fe 01       	movw	r30, r28
    169e:	eb 59       	subi	r30, 0x9B	; 155
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_vidInit+0x33c>
    16aa:	fe 01       	movw	r30, r28
    16ac:	eb 59       	subi	r30, 0x9B	; 155
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	de 01       	movw	r26, r28
    16b6:	a9 59       	subi	r26, 0x99	; 153
    16b8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ba:	fe 01       	movw	r30, r28
    16bc:	e9 59       	subi	r30, 0x99	; 153
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	9c 93       	st	X, r25
    16ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	fe 01       	movw	r30, r28
    16ce:	e9 59       	subi	r30, 0x99	; 153
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	d1 f6       	brne	.-76     	; 0x168e <LCD_vidInit+0x324>
    16da:	27 c0       	rjmp	.+78     	; 0x172a <LCD_vidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	8e 01       	movw	r16, r28
    16de:	09 59       	subi	r16, 0x99	; 153
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	fe 01       	movw	r30, r28
    16e4:	e7 59       	subi	r30, 0x97	; 151
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	f8 01       	movw	r30, r16
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	de 01       	movw	r26, r28
    1700:	ad 59       	subi	r26, 0x9D	; 157
    1702:	bf 4f       	sbci	r27, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e9 59       	subi	r30, 0x99	; 153
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	8d 93       	st	X+, r24
    1710:	9c 93       	st	X, r25
    1712:	fe 01       	movw	r30, r28
    1714:	ed 59       	subi	r30, 0x9D	; 157
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_vidInit+0x3b2>
    1720:	fe 01       	movw	r30, r28
    1722:	ed 59       	subi	r30, 0x9D	; 157
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24

			_delay_ms(1);

			u8CmdLoc = 0b00001000|
    172a:	fe 01       	movw	r30, r28
    172c:	e1 58       	subi	r30, 0x81	; 129
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	c9 01       	movw	r24, r18
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	82 0f       	add	r24, r18
    173e:	93 1f       	adc	r25, r19
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	fc 01       	movw	r30, r24
    174e:	e0 57       	subi	r30, 0x70	; 112
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	86 95       	lsr	r24
    1756:	86 95       	lsr	r24
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	48 2f       	mov	r20, r24
    1768:	48 60       	ori	r20, 0x08	; 8
    176a:	fe 01       	movw	r30, r28
    176c:	e1 58       	subi	r30, 0x81	; 129
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	c9 01       	movw	r24, r18
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	fc 01       	movw	r30, r24
    178e:	e0 57       	subi	r30, 0x70	; 112
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	86 95       	lsr	r24
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	48 2b       	or	r20, r24
    17a6:	fe 01       	movw	r30, r28
    17a8:	e1 58       	subi	r30, 0x81	; 129
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	c9 01       	movw	r24, r18
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	82 0f       	add	r24, r18
    17c6:	93 1f       	adc	r25, r19
    17c8:	fc 01       	movw	r30, r24
    17ca:	e0 57       	subi	r30, 0x70	; 112
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	82 95       	swap	r24
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	84 2b       	or	r24, r20
    17d8:	fe 01       	movw	r30, r28
    17da:	e0 58       	subi	r30, 0x80	; 128
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Display)<<2|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Cursor)<<1 |
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.C_Blink);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    17e0:	fe 01       	movw	r30, r28
    17e2:	e1 58       	subi	r30, 0x81	; 129
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	de 01       	movw	r26, r28
    17e8:	a0 58       	subi	r26, 0x80	; 128
    17ea:	bf 4f       	sbci	r27, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	6c 91       	ld	r22, X
    17f0:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e1 5a       	subi	r30, 0xA1	; 161
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	8e 01       	movw	r16, r28
    180c:	05 5a       	subi	r16, 0xA5	; 165
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e1 5a       	subi	r30, 0xA1	; 161
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a e7       	ldi	r20, 0x7A	; 122
    1824:	53 e4       	ldi	r21, 0x43	; 67
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	f8 01       	movw	r30, r16
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1838:	fe 01       	movw	r30, r28
    183a:	e5 5a       	subi	r30, 0xA5	; 165
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	44 f4       	brge	.+16     	; 0x1866 <LCD_vidInit+0x4fc>
		__ticks = 1;
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5a       	subi	r30, 0xA7	; 167
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	64 c0       	rjmp	.+200    	; 0x192e <LCD_vidInit+0x5c4>
	else if (__tmp > 65535)
    1866:	fe 01       	movw	r30, r28
    1868:	e5 5a       	subi	r30, 0xA5	; 165
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	0c f0       	brlt	.+2      	; 0x1886 <LCD_vidInit+0x51c>
    1884:	43 c0       	rjmp	.+134    	; 0x190c <LCD_vidInit+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	fe 01       	movw	r30, r28
    1888:	e1 5a       	subi	r30, 0xA1	; 161
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8e 01       	movw	r16, r28
    18a6:	07 5a       	subi	r16, 0xA7	; 167
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	f8 01       	movw	r30, r16
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	1f c0       	rjmp	.+62     	; 0x18fc <LCD_vidInit+0x592>
    18be:	fe 01       	movw	r30, r28
    18c0:	e9 5a       	subi	r30, 0xA9	; 169
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	89 e1       	ldi	r24, 0x19	; 25
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	fe 01       	movw	r30, r28
    18ce:	e9 5a       	subi	r30, 0xA9	; 169
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_vidInit+0x56c>
    18da:	fe 01       	movw	r30, r28
    18dc:	e9 5a       	subi	r30, 0xA9	; 169
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	de 01       	movw	r26, r28
    18e6:	a7 5a       	subi	r26, 0xA7	; 167
    18e8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ea:	fe 01       	movw	r30, r28
    18ec:	e7 5a       	subi	r30, 0xA7	; 167
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	11 96       	adiw	r26, 0x01	; 1
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 5a       	subi	r30, 0xA7	; 167
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	d1 f6       	brne	.-76     	; 0x18be <LCD_vidInit+0x554>
    190a:	27 c0       	rjmp	.+78     	; 0x195a <LCD_vidInit+0x5f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	8e 01       	movw	r16, r28
    190e:	07 5a       	subi	r16, 0xA7	; 167
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	e5 5a       	subi	r30, 0xA5	; 165
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	f8 01       	movw	r30, r16
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
    192e:	de 01       	movw	r26, r28
    1930:	ab 5a       	subi	r26, 0xAB	; 171
    1932:	bf 4f       	sbci	r27, 0xFF	; 255
    1934:	fe 01       	movw	r30, r28
    1936:	e7 5a       	subi	r30, 0xA7	; 167
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	8d 93       	st	X+, r24
    1940:	9c 93       	st	X, r25
    1942:	fe 01       	movw	r30, r28
    1944:	eb 5a       	subi	r30, 0xAB	; 171
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	91 81       	ldd	r25, Z+1	; 0x01
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_vidInit+0x5e2>
    1950:	fe 01       	movw	r30, r28
    1952:	eb 5a       	subi	r30, 0xAB	; 171
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24

			_delay_ms(1);

			LCD_vidSendCmd(u8CntrLoc , 0x01);
    195a:	fe 01       	movw	r30, r28
    195c:	e1 58       	subi	r30, 0x81	; 129
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    1968:	fe 01       	movw	r30, r28
    196a:	ef 5a       	subi	r30, 0xAF	; 175
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e4       	ldi	r27, 0x40	; 64
    1976:	80 83       	st	Z, r24
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	a2 83       	std	Z+2, r26	; 0x02
    197c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	8e 01       	movw	r16, r28
    1980:	03 5b       	subi	r16, 0xB3	; 179
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	ef 5a       	subi	r30, 0xAF	; 175
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a e7       	ldi	r20, 0x7A	; 122
    1998:	53 e4       	ldi	r21, 0x43	; 67
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	80 83       	st	Z, r24
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	a2 83       	std	Z+2, r26	; 0x02
    19aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ac:	fe 01       	movw	r30, r28
    19ae:	e3 5b       	subi	r30, 0xB3	; 179
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	44 f4       	brge	.+16     	; 0x19da <LCD_vidInit+0x670>
		__ticks = 1;
    19ca:	fe 01       	movw	r30, r28
    19cc:	e5 5b       	subi	r30, 0xB5	; 181
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	64 c0       	rjmp	.+200    	; 0x1aa2 <LCD_vidInit+0x738>
	else if (__tmp > 65535)
    19da:	fe 01       	movw	r30, r28
    19dc:	e3 5b       	subi	r30, 0xB3	; 179
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	0c f0       	brlt	.+2      	; 0x19fa <LCD_vidInit+0x690>
    19f8:	43 c0       	rjmp	.+134    	; 0x1a80 <LCD_vidInit+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	fe 01       	movw	r30, r28
    19fc:	ef 5a       	subi	r30, 0xAF	; 175
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8e 01       	movw	r16, r28
    1a1a:	05 5b       	subi	r16, 0xB5	; 181
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <LCD_vidInit+0x706>
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 5b       	subi	r30, 0xB7	; 183
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	89 e1       	ldi	r24, 0x19	; 25
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	fe 01       	movw	r30, r28
    1a42:	e7 5b       	subi	r30, 0xB7	; 183
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_vidInit+0x6e0>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e7 5b       	subi	r30, 0xB7	; 183
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	de 01       	movw	r26, r28
    1a5a:	a5 5b       	subi	r26, 0xB5	; 181
    1a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e5 5b       	subi	r30, 0xB5	; 181
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	11 96       	adiw	r26, 0x01	; 1
    1a6c:	9c 93       	st	X, r25
    1a6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 5b       	subi	r30, 0xB5	; 181
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	d1 f6       	brne	.-76     	; 0x1a32 <LCD_vidInit+0x6c8>
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <LCD_vidInit+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	8e 01       	movw	r16, r28
    1a82:	05 5b       	subi	r16, 0xB5	; 181
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	e3 5b       	subi	r30, 0xB3	; 179
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	60 81       	ld	r22, Z
    1a8e:	71 81       	ldd	r23, Z+1	; 0x01
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
    1aa2:	de 01       	movw	r26, r28
    1aa4:	a9 5b       	subi	r26, 0xB9	; 185
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e5 5b       	subi	r30, 0xB5	; 181
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	8d 93       	st	X+, r24
    1ab4:	9c 93       	st	X, r25
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e9 5b       	subi	r30, 0xB9	; 185
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_vidInit+0x756>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e9 5b       	subi	r30, 0xB9	; 185
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24

			_delay_ms(2);

			u8CmdLoc = 0b00000100|
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e1 58       	subi	r30, 0x81	; 129
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	c9 01       	movw	r24, r18
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	82 0f       	add	r24, r18
    1ae2:	93 1f       	adc	r25, r19
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	82 0f       	add	r24, r18
    1aee:	93 1f       	adc	r25, r19
    1af0:	fc 01       	movw	r30, r24
    1af2:	e0 57       	subi	r30, 0x70	; 112
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	82 95       	swap	r24
    1afa:	86 95       	lsr	r24
    1afc:	87 70       	andi	r24, 0x07	; 7
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	48 2f       	mov	r20, r24
    1b0a:	44 60       	ori	r20, 0x04	; 4
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e1 58       	subi	r30, 0x81	; 129
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	c9 01       	movw	r24, r18
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e0 57       	subi	r30, 0x70	; 112
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	82 95       	swap	r24
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	83 70       	andi	r24, 0x03	; 3
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	84 2b       	or	r24, r20
    1b42:	fe 01       	movw	r30, r28
    1b44:	e0 58       	subi	r30, 0x80	; 128
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.EntryMode)<<1|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Shift);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e1 58       	subi	r30, 0x81	; 129
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	de 01       	movw	r26, r28
    1b52:	a0 58       	subi	r26, 0x80	; 128
    1b54:	bf 4f       	sbci	r27, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	6c 91       	ld	r22, X
    1b5a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ed 5b       	subi	r30, 0xBD	; 189
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e8       	ldi	r26, 0x80	; 128
    1b6a:	bf e3       	ldi	r27, 0x3F	; 63
    1b6c:	80 83       	st	Z, r24
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	a2 83       	std	Z+2, r26	; 0x02
    1b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	8e 01       	movw	r16, r28
    1b76:	01 5c       	subi	r16, 0xC1	; 193
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ed 5b       	subi	r30, 0xBD	; 189
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 83       	st	Z, r24
    1b9c:	91 83       	std	Z+1, r25	; 0x01
    1b9e:	a2 83       	std	Z+2, r26	; 0x02
    1ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ff 96       	adiw	r30, 0x3f	; 63
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_vidInit+0x85e>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9e af       	std	Y+62, r25	; 0x3e
    1bc4:	8d af       	std	Y+61, r24	; 0x3d
    1bc6:	46 c0       	rjmp	.+140    	; 0x1c54 <LCD_vidInit+0x8ea>
	else if (__tmp > 65535)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ff 96       	adiw	r30, 0x3f	; 63
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	64 f5       	brge	.+88     	; 0x1c3c <LCD_vidInit+0x8d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	fe 01       	movw	r30, r28
    1be6:	ed 5b       	subi	r30, 0xBD	; 189
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e af       	std	Y+62, r25	; 0x3e
    1c10:	8d af       	std	Y+61, r24	; 0x3d
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LCD_vidInit+0x8c8>
    1c14:	89 e1       	ldi	r24, 0x19	; 25
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c af       	std	Y+60, r25	; 0x3c
    1c1a:	8b af       	std	Y+59, r24	; 0x3b
    1c1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_vidInit+0x8b6>
    1c24:	9c af       	std	Y+60, r25	; 0x3c
    1c26:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e af       	std	Y+62, r25	; 0x3e
    1c30:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <LCD_vidInit+0x8aa>
    1c3a:	ee c2       	rjmp	.+1500   	; 0x2218 <LCD_vidInit+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ff 96       	adiw	r30, 0x3f	; 63
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e af       	std	Y+62, r25	; 0x3e
    1c52:	8d af       	std	Y+61, r24	; 0x3d
    1c54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c58:	9a af       	std	Y+58, r25	; 0x3a
    1c5a:	89 af       	std	Y+57, r24	; 0x39
    1c5c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_vidInit+0x8f6>
    1c64:	9a af       	std	Y+58, r25	; 0x3a
    1c66:	89 af       	std	Y+57, r24	; 0x39
    1c68:	d7 c2       	rjmp	.+1454   	; 0x2218 <LCD_vidInit+0xeae>
			_delay_ms(1);

		}
		else
		{
			LCD_vidSendCmd(u8CntrLoc , 0b00100010);
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e1 58       	subi	r30, 0x81	; 129
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	62 e2       	ldi	r22, 0x22	; 34
    1c74:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
			LCD_u84BitModFlg = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 92 00 	sts	0x0092, r24
			// send 0bNF00
			u8CmdLoc = 0b00000000|
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e1 58       	subi	r30, 0x81	; 129
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	c9 01       	movw	r24, r18
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	82 0f       	add	r24, r18
    1c92:	93 1f       	adc	r25, r19
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	82 0f       	add	r24, r18
    1c9e:	93 1f       	adc	r25, r19
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e0 57       	subi	r30, 0x70	; 112
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 70       	andi	r24, 0x01	; 1
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	96 95       	lsr	r25
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	88 27       	eor	r24, r24
    1cb4:	97 95       	ror	r25
    1cb6:	87 95       	ror	r24
    1cb8:	48 2f       	mov	r20, r24
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e1 58       	subi	r30, 0x81	; 129
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e0 57       	subi	r30, 0x70	; 112
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	86 95       	lsr	r24
    1ce6:	81 70       	andi	r24, 0x01	; 1
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	00 24       	eor	r0, r0
    1cee:	96 95       	lsr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	07 94       	ror	r0
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	07 94       	ror	r0
    1cfa:	98 2f       	mov	r25, r24
    1cfc:	80 2d       	mov	r24, r0
    1cfe:	84 2b       	or	r24, r20
    1d00:	fe 01       	movw	r30, r28
    1d02:	e0 58       	subi	r30, 0x80	; 128
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.N_Line)<<7|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Font)<<6;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e1 58       	subi	r30, 0x81	; 129
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	de 01       	movw	r26, r28
    1d10:	a0 58       	subi	r26, 0x80	; 128
    1d12:	bf 4f       	sbci	r27, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	6c 91       	ld	r22, X
    1d18:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
			LCD_u84BitModFlg = 0;
    1d1c:	10 92 92 00 	sts	0x0092, r1
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	8d ab       	std	Y+53, r24	; 0x35
    1d2a:	9e ab       	std	Y+54, r25	; 0x36
    1d2c:	af ab       	std	Y+55, r26	; 0x37
    1d2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6d a9       	ldd	r22, Y+53	; 0x35
    1d32:	7e a9       	ldd	r23, Y+54	; 0x36
    1d34:	8f a9       	ldd	r24, Y+55	; 0x37
    1d36:	98 ad       	ldd	r25, Y+56	; 0x38
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	53 e4       	ldi	r21, 0x43	; 67
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	89 ab       	std	Y+49, r24	; 0x31
    1d4a:	9a ab       	std	Y+50, r25	; 0x32
    1d4c:	ab ab       	std	Y+51, r26	; 0x33
    1d4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d50:	69 a9       	ldd	r22, Y+49	; 0x31
    1d52:	7a a9       	ldd	r23, Y+50	; 0x32
    1d54:	8b a9       	ldd	r24, Y+51	; 0x33
    1d56:	9c a9       	ldd	r25, Y+52	; 0x34
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_vidInit+0xa08>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	98 ab       	std	Y+48, r25	; 0x30
    1d6e:	8f a7       	std	Y+47, r24	; 0x2f
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_vidInit+0xa86>
	else if (__tmp > 65535)
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_vidInit+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d90:	98 ad       	ldd	r25, Y+56	; 0x38
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	98 ab       	std	Y+48, r25	; 0x30
    1db0:	8f a7       	std	Y+47, r24	; 0x2f
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_vidInit+0xa68>
    1db4:	89 e1       	ldi	r24, 0x19	; 25
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e a7       	std	Y+46, r25	; 0x2e
    1dba:	8d a7       	std	Y+45, r24	; 0x2d
    1dbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_vidInit+0xa56>
    1dc4:	9e a7       	std	Y+46, r25	; 0x2e
    1dc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dca:	98 a9       	ldd	r25, Y+48	; 0x30
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	98 ab       	std	Y+48, r25	; 0x30
    1dd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_vidInit+0xa4a>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_vidInit+0xa9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dde:	7a a9       	ldd	r23, Y+50	; 0x32
    1de0:	8b a9       	ldd	r24, Y+51	; 0x33
    1de2:	9c a9       	ldd	r25, Y+52	; 0x34
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	9c a7       	std	Y+44, r25	; 0x2c
    1df6:	8b a7       	std	Y+43, r24	; 0x2b
    1df8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_vidInit+0xa92>
    1e00:	9c a7       	std	Y+44, r25	; 0x2c
    1e02:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			u8CmdLoc = 0b00001000|
    1e04:	fe 01       	movw	r30, r28
    1e06:	e1 58       	subi	r30, 0x81	; 129
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	c9 01       	movw	r24, r18
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	82 0f       	add	r24, r18
    1e18:	93 1f       	adc	r25, r19
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	82 0f       	add	r24, r18
    1e24:	93 1f       	adc	r25, r19
    1e26:	fc 01       	movw	r30, r24
    1e28:	e0 57       	subi	r30, 0x70	; 112
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	81 70       	andi	r24, 0x01	; 1
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	48 2f       	mov	r20, r24
    1e42:	48 60       	ori	r20, 0x08	; 8
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 58       	subi	r30, 0x81	; 129
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	c9 01       	movw	r24, r18
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	fc 01       	movw	r30, r24
    1e68:	e0 57       	subi	r30, 0x70	; 112
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	86 95       	lsr	r24
    1e74:	81 70       	andi	r24, 0x01	; 1
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	48 2b       	or	r20, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	e1 58       	subi	r30, 0x81	; 129
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	c9 01       	movw	r24, r18
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	82 0f       	add	r24, r18
    1ea0:	93 1f       	adc	r25, r19
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e0 57       	subi	r30, 0x70	; 112
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	82 95       	swap	r24
    1eac:	8f 70       	andi	r24, 0x0F	; 15
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	84 2b       	or	r24, r20
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e0 58       	subi	r30, 0x80	; 128
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Display)<<2|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Cursor)<<1 |
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.C_Blink);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e1 58       	subi	r30, 0x81	; 129
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	de 01       	movw	r26, r28
    1ec2:	a0 58       	subi	r26, 0x80	; 128
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	6c 91       	ld	r22, X
    1eca:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e8       	ldi	r26, 0x80	; 128
    1ed4:	bf e3       	ldi	r27, 0x3F	; 63
    1ed6:	8f a3       	std	Y+39, r24	; 0x27
    1ed8:	98 a7       	std	Y+40, r25	; 0x28
    1eda:	a9 a7       	std	Y+41, r26	; 0x29
    1edc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ede:	6f a1       	ldd	r22, Y+39	; 0x27
    1ee0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ee2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ee4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4a e7       	ldi	r20, 0x7A	; 122
    1eec:	53 e4       	ldi	r21, 0x43	; 67
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8b a3       	std	Y+35, r24	; 0x23
    1ef8:	9c a3       	std	Y+36, r25	; 0x24
    1efa:	ad a3       	std	Y+37, r26	; 0x25
    1efc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1efe:	6b a1       	ldd	r22, Y+35	; 0x23
    1f00:	7c a1       	ldd	r23, Y+36	; 0x24
    1f02:	8d a1       	ldd	r24, Y+37	; 0x25
    1f04:	9e a1       	ldd	r25, Y+38	; 0x26
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <LCD_vidInit+0xbb6>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9a a3       	std	Y+34, r25	; 0x22
    1f1c:	89 a3       	std	Y+33, r24	; 0x21
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <LCD_vidInit+0xc34>
	else if (__tmp > 65535)
    1f20:	6b a1       	ldd	r22, Y+35	; 0x23
    1f22:	7c a1       	ldd	r23, Y+36	; 0x24
    1f24:	8d a1       	ldd	r24, Y+37	; 0x25
    1f26:	9e a1       	ldd	r25, Y+38	; 0x26
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	4c f5       	brge	.+82     	; 0x1f8a <LCD_vidInit+0xc20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9a a3       	std	Y+34, r25	; 0x22
    1f5e:	89 a3       	std	Y+33, r24	; 0x21
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <LCD_vidInit+0xc16>
    1f62:	89 e1       	ldi	r24, 0x19	; 25
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	98 a3       	std	Y+32, r25	; 0x20
    1f68:	8f 8f       	std	Y+31, r24	; 0x1f
    1f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_vidInit+0xc04>
    1f72:	98 a3       	std	Y+32, r25	; 0x20
    1f74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f76:	89 a1       	ldd	r24, Y+33	; 0x21
    1f78:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <LCD_vidInit+0xbf8>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <LCD_vidInit+0xc48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f90:	9e a1       	ldd	r25, Y+38	; 0x26
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	9a a3       	std	Y+34, r25	; 0x22
    1f9c:	89 a3       	std	Y+33, r24	; 0x21
    1f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa4:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_vidInit+0xc40>
    1fae:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb0:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			LCD_vidSendCmd(u8CntrLoc , 0x01);
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e1 58       	subi	r30, 0x81	; 129
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e4       	ldi	r27, 0x40	; 64
    1fc8:	89 8f       	std	Y+25, r24	; 0x19
    1fca:	9a 8f       	std	Y+26, r25	; 0x1a
    1fcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8d 8b       	std	Y+21, r24	; 0x15
    1fea:	9e 8b       	std	Y+22, r25	; 0x16
    1fec:	af 8b       	std	Y+23, r26	; 0x17
    1fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_vidInit+0xca8>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_vidInit+0xd26>
	else if (__tmp > 65535)
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_vidInit+0xd12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	69 8d       	ldd	r22, Y+25	; 0x19
    202c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_vidInit+0xd08>
    2054:	89 e1       	ldi	r24, 0x19	; 25
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9a 8b       	std	Y+18, r25	; 0x12
    205a:	89 8b       	std	Y+17, r24	; 0x11
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	9a 89       	ldd	r25, Y+18	; 0x12
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_vidInit+0xcf6>
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_vidInit+0xcea>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_vidInit+0xd3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6d 89       	ldd	r22, Y+21	; 0x15
    207e:	7e 89       	ldd	r23, Y+22	; 0x16
    2080:	8f 89       	ldd	r24, Y+23	; 0x17
    2082:	98 8d       	ldd	r25, Y+24	; 0x18
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	98 8b       	std	Y+16, r25	; 0x10
    2096:	8f 87       	std	Y+15, r24	; 0x0f
    2098:	8f 85       	ldd	r24, Y+15	; 0x0f
    209a:	98 89       	ldd	r25, Y+16	; 0x10
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_vidInit+0xd32>
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(2);

			u8CmdLoc = 0b00000100|
    20a4:	fe 01       	movw	r30, r28
    20a6:	e1 58       	subi	r30, 0x81	; 129
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	c9 01       	movw	r24, r18
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	fc 01       	movw	r30, r24
    20c8:	e0 57       	subi	r30, 0x70	; 112
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	82 95       	swap	r24
    20d0:	86 95       	lsr	r24
    20d2:	87 70       	andi	r24, 0x07	; 7
    20d4:	81 70       	andi	r24, 0x01	; 1
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	48 2f       	mov	r20, r24
    20e0:	44 60       	ori	r20, 0x04	; 4
    20e2:	fe 01       	movw	r30, r28
    20e4:	e1 58       	subi	r30, 0x81	; 129
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	c9 01       	movw	r24, r18
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	fc 01       	movw	r30, r24
    2106:	e0 57       	subi	r30, 0x70	; 112
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	82 95       	swap	r24
    210e:	86 95       	lsr	r24
    2110:	86 95       	lsr	r24
    2112:	83 70       	andi	r24, 0x03	; 3
    2114:	81 70       	andi	r24, 0x01	; 1
    2116:	84 2b       	or	r24, r20
    2118:	fe 01       	movw	r30, r28
    211a:	e0 58       	subi	r30, 0x80	; 128
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.EntryMode)<<1|
			(LCD_astrConfigSet[u8CntrLoc].strLcdIntCnfg.Shift);
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2120:	fe 01       	movw	r30, r28
    2122:	e1 58       	subi	r30, 0x81	; 129
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	de 01       	movw	r26, r28
    2128:	a0 58       	subi	r26, 0x80	; 128
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	6c 91       	ld	r22, X
    2130:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	8b 87       	std	Y+11, r24	; 0x0b
    213e:	9c 87       	std	Y+12, r25	; 0x0c
    2140:	ad 87       	std	Y+13, r26	; 0x0d
    2142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8f 83       	std	Y+7, r24	; 0x07
    215e:	98 87       	std	Y+8, r25	; 0x08
    2160:	a9 87       	std	Y+9, r26	; 0x09
    2162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_vidInit+0xe1c>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_vidInit+0xe9a>
	else if (__tmp > 65535)
    2186:	6f 81       	ldd	r22, Y+7	; 0x07
    2188:	78 85       	ldd	r23, Y+8	; 0x08
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	9a 85       	ldd	r25, Y+10	; 0x0a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_vidInit+0xe86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_vidInit+0xe7c>
    21c8:	89 e1       	ldi	r24, 0x19	; 25
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_vidInit+0xe6a>
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_vidInit+0xe5e>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_vidInit+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_vidInit+0xea6>
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidInit()
{
	uint8 u8CmdLoc;
	uint8 u8CntrLoc = 0;

	for(u8CntrLoc = 0 ;u8CntrLoc< LCD_MAX_NUM ; u8CntrLoc++)
    2218:	de 01       	movw	r26, r28
    221a:	a1 58       	subi	r26, 0x81	; 129
    221c:	bf 4f       	sbci	r27, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e1 58       	subi	r30, 0x81	; 129
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	8c 93       	st	X, r24
    222a:	fe 01       	movw	r30, r28
    222c:	e1 58       	subi	r30, 0x81	; 129
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	88 23       	and	r24, r24
    2234:	09 f4       	brne	.+2      	; 0x2238 <LCD_vidInit+0xece>
    2236:	af c8       	rjmp	.-3746   	; 0x1396 <LCD_vidInit+0x2c>

		}

	}

}
    2238:	c0 58       	subi	r28, 0x80	; 128
    223a:	df 4f       	sbci	r29, 0xFF	; 255
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	08 95       	ret

00002250 <LCD_vidSendCmd>:

void LCD_vidSendCmd(uint8 u8LcdIndxCpy, uint8 u8CmdCpy)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <LCD_vidSendCmd+0x6>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rs, 0);
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	c9 01       	movw	r24, r18
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	82 0f       	add	r24, r18
    226c:	93 1f       	adc	r25, r19
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	fc 01       	movw	r30, r24
    227c:	eb 57       	subi	r30, 0x7B	; 123
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
	ModeHelper(u8LcdIndxCpy, u8CmdCpy);
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	6a 81       	ldd	r22, Y+2	; 0x02
    228c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <ModeHelper>
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_vidWriteData>:

void LCD_vidWriteData(uint8 u8LcdIndxCpy, uint8 u8DataCpy)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <LCD_vidWriteData+0x6>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rs, 1);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	c9 01       	movw	r24, r18
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	82 0f       	add	r24, r18
    22c2:	93 1f       	adc	r25, r19
    22c4:	fc 01       	movw	r30, r24
    22c6:	eb 57       	subi	r30, 0x7B	; 123
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
	ModeHelper(u8LcdIndxCpy, u8DataCpy);
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	6a 81       	ldd	r22, Y+2	; 0x02
    22d6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <ModeHelper>
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <ModeHelper>:

static void ModeHelper (uint8 u8LcdIndxCpy, uint8 u8DataorCmdCpy)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <ModeHelper+0x6>
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	6a 83       	std	Y+2, r22	; 0x02

	if(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Concmode == LCD_8BIT_MODE)
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	c9 01       	movw	r24, r18
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	82 0f       	add	r24, r18
    230c:	93 1f       	adc	r25, r19
    230e:	fc 01       	movw	r30, r24
    2310:	ec 57       	subi	r30, 0x7C	; 124
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	31 f4       	brne	.+12     	; 0x2326 <ModeHelper+0x42>
	{
		WriteHelper(_8BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	69 81       	ldd	r22, Y+1	; 0x01
    231e:	4a 81       	ldd	r20, Y+2	; 0x02
    2320:	0e 94 c5 11 	call	0x238a	; 0x238a <WriteHelper>
    2324:	2d c0       	rjmp	.+90     	; 0x2380 <ModeHelper+0x9c>
	}
	else
	{
		DIO_enumWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdExtCnfg.Rw,0);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	c9 01       	movw	r24, r18
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	fc 01       	movw	r30, r24
    2344:	ea 57       	subi	r30, 0x7A	; 122
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>

		if(LCD_u84BitModFlg == 1)
    2350:	80 91 92 00 	lds	r24, 0x0092
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	31 f4       	brne	.+12     	; 0x2364 <ModeHelper+0x80>
		{
			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    2358:	84 e0       	ldi	r24, 0x04	; 4
    235a:	69 81       	ldd	r22, Y+1	; 0x01
    235c:	4a 81       	ldd	r20, Y+2	; 0x02
    235e:	0e 94 c5 11 	call	0x238a	; 0x238a <WriteHelper>
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <ModeHelper+0x9c>
		}
		else
		{
			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	69 81       	ldd	r22, Y+1	; 0x01
    2368:	4a 81       	ldd	r20, Y+2	; 0x02
    236a:	0e 94 c5 11 	call	0x238a	; 0x238a <WriteHelper>

			u8DataorCmdCpy = u8DataorCmdCpy << 4;
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	82 95       	swap	r24
    2372:	80 7f       	andi	r24, 0xF0	; 240
    2374:	8a 83       	std	Y+2, r24	; 0x02

			WriteHelper(_4BIT_START_PIN, u8LcdIndxCpy, u8DataorCmdCpy);
    2376:	84 e0       	ldi	r24, 0x04	; 4
    2378:	69 81       	ldd	r22, Y+1	; 0x01
    237a:	4a 81       	ldd	r20, Y+2	; 0x02
    237c:	0e 94 c5 11 	call	0x238a	; 0x238a <WriteHelper>
		}

	}
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <WriteHelper>:

static void WriteHelper(uint8 u8StartPin, uint8 u8lcdIndxCpy, uint8 u8DataorCmdCpy)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	a0 97       	sbiw	r28, 0x20	; 32
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	8e 8f       	std	Y+30, r24	; 0x1e
    23a0:	6f 8f       	std	Y+31, r22	; 0x1f
    23a2:	48 a3       	std	Y+32, r20	; 0x20
			uint8 u8PinNumLoc;

			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Rw, 0);
    23a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	c9 01       	movw	r24, r18
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	82 0f       	add	r24, r18
    23b2:	93 1f       	adc	r25, r19
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	fc 01       	movw	r30, r24
    23c2:	ea 57       	subi	r30, 0x7A	; 122
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 1);
    23ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	c9 01       	movw	r24, r18
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	82 0f       	add	r24, r18
    23e8:	93 1f       	adc	r25, r19
    23ea:	fc 01       	movw	r30, r24
    23ec:	e9 57       	subi	r30, 0x79	; 121
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>

			for (u8PinNumLoc = u8StartPin; u8PinNumLoc < 8; ++u8PinNumLoc)
    23f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fa:	8d 8f       	std	Y+29, r24	; 0x1d
    23fc:	2d c0       	rjmp	.+90     	; 0x2458 <WriteHelper+0xce>
			{
				DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Databus[u8PinNumLoc],
    23fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2406:	48 2f       	mov	r20, r24
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	c9 01       	movw	r24, r18
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	82 0f       	add	r24, r18
    2412:	93 1f       	adc	r25, r19
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	82 0f       	add	r24, r18
    241e:	93 1f       	adc	r25, r19
    2420:	84 0f       	add	r24, r20
    2422:	95 1f       	adc	r25, r21
    2424:	fc 01       	movw	r30, r24
    2426:	e8 57       	subi	r30, 0x78	; 120
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	40 81       	ld	r20, Z
    242c:	88 a1       	ldd	r24, Y+32	; 0x20
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	b9 01       	movw	r22, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <WriteHelper+0xb6>
    243c:	75 95       	asr	r23
    243e:	67 95       	ror	r22
    2440:	8a 95       	dec	r24
    2442:	e2 f7       	brpl	.-8      	; 0x243c <WriteHelper+0xb2>
    2444:	cb 01       	movw	r24, r22
    2446:	98 2f       	mov	r25, r24
    2448:	91 70       	andi	r25, 0x01	; 1
    244a:	84 2f       	mov	r24, r20
    244c:	69 2f       	mov	r22, r25
    244e:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
			uint8 u8PinNumLoc;

			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Rw, 0);
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 1);

			for (u8PinNumLoc = u8StartPin; u8PinNumLoc < 8; ++u8PinNumLoc)
    2452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2454:	8f 5f       	subi	r24, 0xFF	; 255
    2456:	8d 8f       	std	Y+29, r24	; 0x1d
    2458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245a:	88 30       	cpi	r24, 0x08	; 8
    245c:	80 f2       	brcs	.-96     	; 0x23fe <WriteHelper+0x74>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e8       	ldi	r26, 0x80	; 128
    2464:	bf e3       	ldi	r27, 0x3F	; 63
    2466:	89 8f       	std	Y+25, r24	; 0x19
    2468:	9a 8f       	std	Y+26, r25	; 0x1a
    246a:	ab 8f       	std	Y+27, r26	; 0x1b
    246c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	69 8d       	ldd	r22, Y+25	; 0x19
    2470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a e7       	ldi	r20, 0x7A	; 122
    247c:	53 e4       	ldi	r21, 0x43	; 67
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8d 8b       	std	Y+21, r24	; 0x15
    2488:	9e 8b       	std	Y+22, r25	; 0x16
    248a:	af 8b       	std	Y+23, r26	; 0x17
    248c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <WriteHelper+0x126>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <WriteHelper+0x1a4>
	else if (__tmp > 65535)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <WriteHelper+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9c 8b       	std	Y+20, r25	; 0x14
    24ee:	8b 8b       	std	Y+19, r24	; 0x13
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <WriteHelper+0x186>
    24f2:	89 e1       	ldi	r24, 0x19	; 25
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9a 8b       	std	Y+18, r25	; 0x12
    24f8:	89 8b       	std	Y+17, r24	; 0x11
    24fa:	89 89       	ldd	r24, Y+17	; 0x11
    24fc:	9a 89       	ldd	r25, Y+18	; 0x12
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <WriteHelper+0x174>
    2502:	9a 8b       	std	Y+18, r25	; 0x12
    2504:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9c 8b       	std	Y+20, r25	; 0x14
    250e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <WriteHelper+0x168>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <WriteHelper+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6d 89       	ldd	r22, Y+21	; 0x15
    251c:	7e 89       	ldd	r23, Y+22	; 0x16
    251e:	8f 89       	ldd	r24, Y+23	; 0x17
    2520:	98 8d       	ldd	r25, Y+24	; 0x18
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	98 8b       	std	Y+16, r25	; 0x10
    2534:	8f 87       	std	Y+15, r24	; 0x0f
    2536:	8f 85       	ldd	r24, Y+15	; 0x0f
    2538:	98 89       	ldd	r25, Y+16	; 0x10
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <WriteHelper+0x1b0>
    253e:	98 8b       	std	Y+16, r25	; 0x10
    2540:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.Databus[u8PinNumLoc],
						GET_BIT(u8DataorCmdCpy, u8PinNumLoc));
			}

			_delay_ms(1);
			DIO_enumWritePin(LCD_astrConfigSet[u8lcdIndxCpy].strLcdExtCnfg.En, 0);
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	c9 01       	movw	r24, r18
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	82 0f       	add	r24, r18
    2550:	93 1f       	adc	r25, r19
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	82 0f       	add	r24, r18
    255c:	93 1f       	adc	r25, r19
    255e:	fc 01       	movw	r30, r24
    2560:	e9 57       	subi	r30, 0x79	; 121
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enumWritePin>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e8       	ldi	r26, 0x80	; 128
    2572:	bf e3       	ldi	r27, 0x3F	; 63
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a e7       	ldi	r20, 0x7A	; 122
    258a:	53 e4       	ldi	r21, 0x43	; 67
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <WriteHelper+0x234>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <WriteHelper+0x2b2>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <WriteHelper+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <WriteHelper+0x294>
    2600:	89 e1       	ldi	r24, 0x19	; 25
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <WriteHelper+0x282>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <WriteHelper+0x276>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <WriteHelper+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <WriteHelper+0x2be>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
}
    2650:	a0 96       	adiw	r28, 0x20	; 32
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <main>:
uint8 u8CntrLoc = 0;
uint8 u8PressedKeyLoc = 0;
uint8 u8ClearFlag = 0;

int main(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	ab 97       	sbiw	r28, 0x2b	; 43
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
	DIO_vidInit();
    2676:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidInit>
	LCD_vidInit();
    267a:	0e 94 b5 09 	call	0x136a	; 0x136a <LCD_vidInit>
	KEYPAD_voidInit();
    267e:	0e 94 6f 08 	call	0x10de	; 0x10de <KEYPAD_voidInit>

	EXT0_vidInit();
    2682:	0e 94 7c 07 	call	0xef8	; 0xef8 <EXT0_vidInit>
	EXT0_vidIntEnable();
    2686:	0e 94 f8 07 	call	0xff0	; 0xff0 <EXT0_vidIntEnable>

	EXT0_vidSetCallback(ISR_EXT0_Action);
    268a:	87 e4       	ldi	r24, 0x47	; 71
    268c:	95 e1       	ldi	r25, 0x15	; 21
    268e:	0e 94 14 08 	call	0x1028	; 0x1028 <EXT0_vidSetCallback>

	GIE_vidEnable();
    2692:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GIE_vidEnable>

	LCD_vidSendCmd(0, LCD_CLR);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>

	while (1)
	{

	    if (u8ClearFlag == 1)
    269e:	80 91 99 00 	lds	r24, 0x0099
    26a2:	81 30       	cpi	r24, 0x01	; 1
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <main+0x46>
    26a6:	83 c0       	rjmp	.+262    	; 0x27ae <main+0x14c>
	    {
			u8ClearFlag = 0; // Set the flag to indicate clearing is required
    26a8:	10 92 99 00 	sts	0x0099, r1

			LCD_vidSendCmd(0, LCD_CLR);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_vidSendCmd>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e2       	ldi	r26, 0x20	; 32
    26ba:	b1 e4       	ldi	r27, 0x41	; 65
    26bc:	8f a3       	std	Y+39, r24	; 0x27
    26be:	98 a7       	std	Y+40, r25	; 0x28
    26c0:	a9 a7       	std	Y+41, r26	; 0x29
    26c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	6f a1       	ldd	r22, Y+39	; 0x27
    26c6:	78 a5       	ldd	r23, Y+40	; 0x28
    26c8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a e7       	ldi	r20, 0x7A	; 122
    26d2:	53 e4       	ldi	r21, 0x43	; 67
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8b a3       	std	Y+35, r24	; 0x23
    26de:	9c a3       	std	Y+36, r25	; 0x24
    26e0:	ad a3       	std	Y+37, r26	; 0x25
    26e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26e4:	6b a1       	ldd	r22, Y+35	; 0x23
    26e6:	7c a1       	ldd	r23, Y+36	; 0x24
    26e8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ea:	9e a1       	ldd	r25, Y+38	; 0x26
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <main+0xa4>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9a a3       	std	Y+34, r25	; 0x22
    2702:	89 a3       	std	Y+33, r24	; 0x21
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <main+0x122>
	else if (__tmp > 65535)
    2706:	6b a1       	ldd	r22, Y+35	; 0x23
    2708:	7c a1       	ldd	r23, Y+36	; 0x24
    270a:	8d a1       	ldd	r24, Y+37	; 0x25
    270c:	9e a1       	ldd	r25, Y+38	; 0x26
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	4c f5       	brge	.+82     	; 0x2770 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	6f a1       	ldd	r22, Y+39	; 0x27
    2720:	78 a5       	ldd	r23, Y+40	; 0x28
    2722:	89 a5       	ldd	r24, Y+41	; 0x29
    2724:	9a a5       	ldd	r25, Y+42	; 0x2a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9a a3       	std	Y+34, r25	; 0x22
    2744:	89 a3       	std	Y+33, r24	; 0x21
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <main+0x104>
    2748:	89 e1       	ldi	r24, 0x19	; 25
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	98 a3       	std	Y+32, r25	; 0x20
    274e:	8f 8f       	std	Y+31, r24	; 0x1f
    2750:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2752:	98 a1       	ldd	r25, Y+32	; 0x20
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <main+0xf2>
    2758:	98 a3       	std	Y+32, r25	; 0x20
    275a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	89 a1       	ldd	r24, Y+33	; 0x21
    275e:	9a a1       	ldd	r25, Y+34	; 0x22
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9a a3       	std	Y+34, r25	; 0x22
    2764:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	89 a1       	ldd	r24, Y+33	; 0x21
    2768:	9a a1       	ldd	r25, Y+34	; 0x22
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <main+0xe6>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	6b a1       	ldd	r22, Y+35	; 0x23
    2772:	7c a1       	ldd	r23, Y+36	; 0x24
    2774:	8d a1       	ldd	r24, Y+37	; 0x25
    2776:	9e a1       	ldd	r25, Y+38	; 0x26
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9a a3       	std	Y+34, r25	; 0x22
    2782:	89 a3       	std	Y+33, r24	; 0x21
    2784:	89 a1       	ldd	r24, Y+33	; 0x21
    2786:	9a a1       	ldd	r25, Y+34	; 0x22
    2788:	9e 8f       	std	Y+30, r25	; 0x1e
    278a:	8d 8f       	std	Y+29, r24	; 0x1d
    278c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <main+0x12e>
    2794:	9e 8f       	std	Y+30, r25	; 0x1e
    2796:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			// Reset variables after clearing the LCD
			u8FirstNumLoc = 0;
    2798:	10 92 93 00 	sts	0x0093, r1
			u8SecNumLoc = 0;
    279c:	10 92 94 00 	sts	0x0094, r1
			u8OperationLoc = 0;
    27a0:	10 92 95 00 	sts	0x0095, r1
			u8EqualValuLoc = 0;
    27a4:	10 92 96 00 	sts	0x0096, r1
			u8CntrLoc = 0;
    27a8:	10 92 97 00 	sts	0x0097, r1
    27ac:	78 cf       	rjmp	.-272    	; 0x269e <main+0x3c>

			continue;
	    }

	    u8PressedKeyLoc = KEYPAD_u8GetPressedKey(0);
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	0e 94 b3 08 	call	0x1166	; 0x1166 <KEYPAD_u8GetPressedKey>
    27b4:	80 93 98 00 	sts	0x0098, r24

		if (u8PressedKeyLoc != 0xFF)
    27b8:	80 91 98 00 	lds	r24, 0x0098
    27bc:	8f 3f       	cpi	r24, 0xFF	; 255
    27be:	09 f4       	brne	.+2      	; 0x27c2 <main+0x160>
    27c0:	6e cf       	rjmp	.-292    	; 0x269e <main+0x3c>
		{

            if (u8PressedKeyLoc == '=')
    27c2:	80 91 98 00 	lds	r24, 0x0098
    27c6:	8d 33       	cpi	r24, 0x3D	; 61
    27c8:	09 f0       	breq	.+2      	; 0x27cc <main+0x16a>
    27ca:	94 c0       	rjmp	.+296    	; 0x28f4 <main+0x292>
            {
                if (u8CntrLoc == 3) // Ensure all required inputs are available
    27cc:	80 91 97 00 	lds	r24, 0x0097
    27d0:	83 30       	cpi	r24, 0x03	; 3
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <main+0x174>
    27d4:	64 cf       	rjmp	.-312    	; 0x269e <main+0x3c>
                {
                    uint8 u8EqualValuLoc = calculateResult(u8FirstNumLoc, u8SecNumLoc, u8OperationLoc);
    27d6:	80 91 93 00 	lds	r24, 0x0093
    27da:	90 91 94 00 	lds	r25, 0x0094
    27de:	20 91 95 00 	lds	r18, 0x0095
    27e2:	69 2f       	mov	r22, r25
    27e4:	42 2f       	mov	r20, r18
    27e6:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <calculateResult>
    27ea:	8b a7       	std	Y+43, r24	; 0x2b
                    LCD_vidWriteData(0, '=');
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	6d e3       	ldi	r22, 0x3D	; 61
    27f0:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_vidWriteData>
                    displayResult(u8EqualValuLoc);
    27f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <displayResult>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	aa ef       	ldi	r26, 0xFA	; 250
    2804:	b4 e4       	ldi	r27, 0x44	; 68
    2806:	89 8f       	std	Y+25, r24	; 0x19
    2808:	9a 8f       	std	Y+26, r25	; 0x1a
    280a:	ab 8f       	std	Y+27, r26	; 0x1b
    280c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280e:	69 8d       	ldd	r22, Y+25	; 0x19
    2810:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2812:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2814:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a e7       	ldi	r20, 0x7A	; 122
    281c:	53 e4       	ldi	r21, 0x43	; 67
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	8d 8b       	std	Y+21, r24	; 0x15
    2828:	9e 8b       	std	Y+22, r25	; 0x16
    282a:	af 8b       	std	Y+23, r26	; 0x17
    282c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    282e:	6d 89       	ldd	r22, Y+21	; 0x15
    2830:	7e 89       	ldd	r23, Y+22	; 0x16
    2832:	8f 89       	ldd	r24, Y+23	; 0x17
    2834:	98 8d       	ldd	r25, Y+24	; 0x18
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	2c f4       	brge	.+10     	; 0x2850 <main+0x1ee>
		__ticks = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	3f c0       	rjmp	.+126    	; 0x28ce <main+0x26c>
	else if (__tmp > 65535)
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	4c f5       	brge	.+82     	; 0x28ba <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	69 8d       	ldd	r22, Y+25	; 0x19
    286a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    286e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9c 8b       	std	Y+20, r25	; 0x14
    288e:	8b 8b       	std	Y+19, r24	; 0x13
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <main+0x24e>
    2892:	89 e1       	ldi	r24, 0x19	; 25
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a 8b       	std	Y+18, r25	; 0x12
    2898:	89 8b       	std	Y+17, r24	; 0x11
    289a:	89 89       	ldd	r24, Y+17	; 0x11
    289c:	9a 89       	ldd	r25, Y+18	; 0x12
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x23c>
    28a2:	9a 8b       	std	Y+18, r25	; 0x12
    28a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a6:	8b 89       	ldd	r24, Y+19	; 0x13
    28a8:	9c 89       	ldd	r25, Y+20	; 0x14
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	8b 89       	ldd	r24, Y+19	; 0x13
    28b2:	9c 89       	ldd	r25, Y+20	; 0x14
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	69 f7       	brne	.-38     	; 0x2892 <main+0x230>
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	6d 89       	ldd	r22, Y+21	; 0x15
    28bc:	7e 89       	ldd	r23, Y+22	; 0x16
    28be:	8f 89       	ldd	r24, Y+23	; 0x17
    28c0:	98 8d       	ldd	r25, Y+24	; 0x18
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	98 8b       	std	Y+16, r25	; 0x10
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	98 89       	ldd	r25, Y+16	; 0x10
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <main+0x278>
    28de:	98 8b       	std	Y+16, r25	; 0x10
    28e0:	8f 87       	std	Y+15, r24	; 0x0f

                    _delay_ms(2000);

                    // Reset variables for next calculation
                    u8FirstNumLoc = 0;
    28e2:	10 92 93 00 	sts	0x0093, r1
                    u8SecNumLoc = 0;
    28e6:	10 92 94 00 	sts	0x0094, r1
                    u8OperationLoc = 0;
    28ea:	10 92 95 00 	sts	0x0095, r1
                    u8CntrLoc = 0;
    28ee:	10 92 97 00 	sts	0x0097, r1
    28f2:	d5 ce       	rjmp	.-598    	; 0x269e <main+0x3c>
                }
            }
            else
            {
				if (u8CntrLoc == 0 && u8PressedKeyLoc != 'C')
    28f4:	80 91 97 00 	lds	r24, 0x0097
    28f8:	88 23       	and	r24, r24
    28fa:	79 f4       	brne	.+30     	; 0x291a <main+0x2b8>
    28fc:	80 91 98 00 	lds	r24, 0x0098
    2900:	83 34       	cpi	r24, 0x43	; 67
    2902:	59 f0       	breq	.+22     	; 0x291a <main+0x2b8>
				{
					u8FirstNumLoc = u8PressedKeyLoc;
    2904:	80 91 98 00 	lds	r24, 0x0098
    2908:	80 93 93 00 	sts	0x0093, r24
					LCD_vidWriteData(0, u8FirstNumLoc);
    290c:	90 91 93 00 	lds	r25, 0x0093
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	69 2f       	mov	r22, r25
    2914:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_vidWriteData>
    2918:	42 c0       	rjmp	.+132    	; 0x299e <main+0x33c>

				}
				else if (u8CntrLoc == 1 && u8PressedKeyLoc != 'C')
    291a:	80 91 97 00 	lds	r24, 0x0097
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	79 f4       	brne	.+30     	; 0x2940 <main+0x2de>
    2922:	80 91 98 00 	lds	r24, 0x0098
    2926:	83 34       	cpi	r24, 0x43	; 67
    2928:	59 f0       	breq	.+22     	; 0x2940 <main+0x2de>
				{
					u8OperationLoc = u8PressedKeyLoc;
    292a:	80 91 98 00 	lds	r24, 0x0098
    292e:	80 93 95 00 	sts	0x0095, r24
					LCD_vidWriteData(0, u8OperationLoc);
    2932:	90 91 95 00 	lds	r25, 0x0095
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	69 2f       	mov	r22, r25
    293a:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_vidWriteData>
    293e:	2f c0       	rjmp	.+94     	; 0x299e <main+0x33c>

				} else if (u8CntrLoc == 2 && u8PressedKeyLoc != 'C')
    2940:	80 91 97 00 	lds	r24, 0x0097
    2944:	82 30       	cpi	r24, 0x02	; 2
    2946:	79 f4       	brne	.+30     	; 0x2966 <main+0x304>
    2948:	80 91 98 00 	lds	r24, 0x0098
    294c:	83 34       	cpi	r24, 0x43	; 67
    294e:	59 f0       	breq	.+22     	; 0x2966 <main+0x304>
				{
					u8SecNumLoc = u8PressedKeyLoc;
    2950:	80 91 98 00 	lds	r24, 0x0098
    2954:	80 93 94 00 	sts	0x0094, r24
					LCD_vidWriteData(0, u8SecNumLoc);
    2958:	90 91 94 00 	lds	r25, 0x0094
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	69 2f       	mov	r22, r25
    2960:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_vidWriteData>
    2964:	1c c0       	rjmp	.+56     	; 0x299e <main+0x33c>

				}
				else if (u8CntrLoc == 3 && u8PressedKeyLoc != 'C')
    2966:	80 91 97 00 	lds	r24, 0x0097
    296a:	83 30       	cpi	r24, 0x03	; 3
    296c:	c1 f4       	brne	.+48     	; 0x299e <main+0x33c>
    296e:	80 91 98 00 	lds	r24, 0x0098
    2972:	83 34       	cpi	r24, 0x43	; 67
    2974:	a1 f0       	breq	.+40     	; 0x299e <main+0x33c>
				{
					u8EqualValuLoc = calculateResult(u8FirstNumLoc, u8SecNumLoc, u8OperationLoc);
    2976:	80 91 93 00 	lds	r24, 0x0093
    297a:	90 91 94 00 	lds	r25, 0x0094
    297e:	20 91 95 00 	lds	r18, 0x0095
    2982:	69 2f       	mov	r22, r25
    2984:	42 2f       	mov	r20, r18
    2986:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <calculateResult>
    298a:	80 93 96 00 	sts	0x0096, r24
					u8CntrLoc = 0;
    298e:	10 92 97 00 	sts	0x0097, r1

					displayResult(u8EqualValuLoc);
    2992:	80 91 96 00 	lds	r24, 0x0096
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <displayResult>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	aa ef       	ldi	r26, 0xFA	; 250
    29a4:	b4 e4       	ldi	r27, 0x44	; 68
    29a6:	8b 87       	std	Y+11, r24	; 0x0b
    29a8:	9c 87       	std	Y+12, r25	; 0x0c
    29aa:	ad 87       	std	Y+13, r26	; 0x0d
    29ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	53 e4       	ldi	r21, 0x43	; 67
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8f 83       	std	Y+7, r24	; 0x07
    29c8:	98 87       	std	Y+8, r25	; 0x08
    29ca:	a9 87       	std	Y+9, r26	; 0x09
    29cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ce:	6f 81       	ldd	r22, Y+7	; 0x07
    29d0:	78 85       	ldd	r23, Y+8	; 0x08
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <main+0x38e>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <main+0x40c>
	else if (__tmp > 65535)
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <main+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <main+0x3ee>
    2a32:	89 e1       	ldi	r24, 0x19	; 25
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9c 83       	std	Y+4, r25	; 0x04
    2a38:	8b 83       	std	Y+3, r24	; 0x03
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <main+0x3dc>
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <main+0x3d0>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <main+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5c:	78 85       	ldd	r23, Y+8	; 0x08
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <main+0x418>
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
				}

				_delay_ms(2000);

				u8CntrLoc++;
    2a82:	80 91 97 00 	lds	r24, 0x0097
    2a86:	8f 5f       	subi	r24, 0xFF	; 255
    2a88:	80 93 97 00 	sts	0x0097, r24
    2a8c:	08 ce       	rjmp	.-1008   	; 0x269e <main+0x3c>

00002a8e <ISR_EXT0_Action>:
	return 0 ;
}


void ISR_EXT0_Action()
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	u8PressedKeyLoc = KEYPAD_u8GetPressedKey(0);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	0e 94 b3 08 	call	0x1166	; 0x1166 <KEYPAD_u8GetPressedKey>
    2a9c:	80 93 98 00 	sts	0x0098, r24

	if(u8PressedKeyLoc == 'C')
    2aa0:	80 91 98 00 	lds	r24, 0x0098
    2aa4:	83 34       	cpi	r24, 0x43	; 67
    2aa6:	19 f4       	brne	.+6      	; 0x2aae <ISR_EXT0_Action+0x20>
	{
		u8ClearFlag = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	80 93 99 00 	sts	0x0099, r24
	}
}
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <calculateResult>:

uint8 calculateResult(uint8 firstNum, uint8 secondNum, uint8 operation)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <calculateResult+0x6>
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <calculateResult+0x8>
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <calculateResult+0xa>
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	6b 83       	std	Y+3, r22	; 0x03
    2ac6:	4c 83       	std	Y+4, r20	; 0x04
    uint8 result;

    firstNum -= '0';  // Convert from ASCII to number
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	80 53       	subi	r24, 0x30	; 48
    2acc:	8a 83       	std	Y+2, r24	; 0x02
    secondNum -= '0'; // Convert from ASCII to number
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	80 53       	subi	r24, 0x30	; 48
    2ad2:	8b 83       	std	Y+3, r24	; 0x03

    switch (operation)
    2ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3e 83       	std	Y+6, r19	; 0x06
    2adc:	2d 83       	std	Y+5, r18	; 0x05
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	8b 32       	cpi	r24, 0x2B	; 43
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	b1 f0       	breq	.+44     	; 0x2b14 <calculateResult+0x60>
    2ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aea:	3e 81       	ldd	r19, Y+6	; 0x06
    2aec:	2c 32       	cpi	r18, 0x2C	; 44
    2aee:	31 05       	cpc	r19, r1
    2af0:	34 f4       	brge	.+12     	; 0x2afe <calculateResult+0x4a>
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	8a 32       	cpi	r24, 0x2A	; 42
    2af8:	91 05       	cpc	r25, r1
    2afa:	b1 f0       	breq	.+44     	; 0x2b28 <calculateResult+0x74>
    2afc:	28 c0       	rjmp	.+80     	; 0x2b4e <calculateResult+0x9a>
    2afe:	2d 81       	ldd	r18, Y+5	; 0x05
    2b00:	3e 81       	ldd	r19, Y+6	; 0x06
    2b02:	2d 32       	cpi	r18, 0x2D	; 45
    2b04:	31 05       	cpc	r19, r1
    2b06:	59 f0       	breq	.+22     	; 0x2b1e <calculateResult+0x6a>
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	8f 32       	cpi	r24, 0x2F	; 47
    2b0e:	91 05       	cpc	r25, r1
    2b10:	91 f0       	breq	.+36     	; 0x2b36 <calculateResult+0x82>
    2b12:	1d c0       	rjmp	.+58     	; 0x2b4e <calculateResult+0x9a>
    {
        case '+':
            result = firstNum + secondNum;
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	9b 81       	ldd	r25, Y+3	; 0x03
    2b18:	89 0f       	add	r24, r25
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	19 c0       	rjmp	.+50     	; 0x2b50 <calculateResult+0x9c>
            break;
        case '-':
            result = firstNum - secondNum;
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	89 1b       	sub	r24, r25
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <calculateResult+0x9c>
            break;
        case '*':
            result = firstNum * secondNum;
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2c:	89 9f       	mul	r24, r25
    2b2e:	80 2d       	mov	r24, r0
    2b30:	11 24       	eor	r1, r1
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <calculateResult+0x9c>
            break;
        case '/':
            if (secondNum != 0)
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	88 23       	and	r24, r24
    2b3a:	39 f0       	breq	.+14     	; 0x2b4a <calculateResult+0x96>
            {
                result = firstNum / secondNum;
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	69 2f       	mov	r22, r25
    2b42:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodqi4>
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	03 c0       	rjmp	.+6      	; 0x2b50 <calculateResult+0x9c>
            }
            else
            {
                result = 0; // Handle division by zero case
    2b4a:	19 82       	std	Y+1, r1	; 0x01
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <calculateResult+0x9c>
            }
            break;
        default:
            result = 0;
    2b4e:	19 82       	std	Y+1, r1	; 0x01
            break;
    }

    return result;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b52:	26 96       	adiw	r28, 0x06	; 6
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <displayResult>:

void displayResult(uint16 result)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	28 97       	sbiw	r28, 0x08	; 8
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	98 87       	std	Y+8, r25	; 0x08
    2b7a:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[5]; // Buffer to hold the result as a string

    itoa(result, buffer, 10); // Convert the result to a string
    2b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7e:	98 85       	ldd	r25, Y+8	; 0x08
    2b80:	9e 01       	movw	r18, r28
    2b82:	2e 5f       	subi	r18, 0xFE	; 254
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	b9 01       	movw	r22, r18
    2b88:	4a e0       	ldi	r20, 0x0A	; 10
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <itoa>

    for (uint8 i = 0; buffer[i] != '\0'; i++)
    2b90:	19 82       	std	Y+1, r1	; 0x01
    2b92:	10 c0       	rjmp	.+32     	; 0x2bb4 <displayResult+0x50>
    {
        LCD_vidWriteData(0, buffer[i]);
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	02 96       	adiw	r24, 0x02	; 2
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	e2 0f       	add	r30, r18
    2ba2:	f3 1f       	adc	r31, r19
    2ba4:	90 81       	ld	r25, Z
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	69 2f       	mov	r22, r25
    2baa:	0e 94 4d 11 	call	0x229a	; 0x229a <LCD_vidWriteData>
{
    char buffer[5]; // Buffer to hold the result as a string

    itoa(result, buffer, 10); // Convert the result to a string

    for (uint8 i = 0; buffer[i] != '\0'; i++)
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	ce 01       	movw	r24, r28
    2bbc:	02 96       	adiw	r24, 0x02	; 2
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	88 23       	and	r24, r24
    2bc8:	29 f7       	brne	.-54     	; 0x2b94 <displayResult+0x30>
    {
        LCD_vidWriteData(0, buffer[i]);
    }
}
    2bca:	28 96       	adiw	r28, 0x08	; 8
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <__udivmodqi4>:
    2bdc:	99 1b       	sub	r25, r25
    2bde:	79 e0       	ldi	r23, 0x09	; 9
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <__udivmodqi4_ep>

00002be2 <__udivmodqi4_loop>:
    2be2:	99 1f       	adc	r25, r25
    2be4:	96 17       	cp	r25, r22
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <__udivmodqi4_ep>
    2be8:	96 1b       	sub	r25, r22

00002bea <__udivmodqi4_ep>:
    2bea:	88 1f       	adc	r24, r24
    2bec:	7a 95       	dec	r23
    2bee:	c9 f7       	brne	.-14     	; 0x2be2 <__udivmodqi4_loop>
    2bf0:	80 95       	com	r24
    2bf2:	08 95       	ret

00002bf4 <__prologue_saves__>:
    2bf4:	2f 92       	push	r2
    2bf6:	3f 92       	push	r3
    2bf8:	4f 92       	push	r4
    2bfa:	5f 92       	push	r5
    2bfc:	6f 92       	push	r6
    2bfe:	7f 92       	push	r7
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	bf 92       	push	r11
    2c08:	cf 92       	push	r12
    2c0a:	df 92       	push	r13
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	ca 1b       	sub	r28, r26
    2c1e:	db 0b       	sbc	r29, r27
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	09 94       	ijmp

00002c2c <__epilogue_restores__>:
    2c2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2e:	39 88       	ldd	r3, Y+17	; 0x11
    2c30:	48 88       	ldd	r4, Y+16	; 0x10
    2c32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c40:	c8 84       	ldd	r12, Y+8	; 0x08
    2c42:	df 80       	ldd	r13, Y+7	; 0x07
    2c44:	ee 80       	ldd	r14, Y+6	; 0x06
    2c46:	fd 80       	ldd	r15, Y+5	; 0x05
    2c48:	0c 81       	ldd	r16, Y+4	; 0x04
    2c4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c50:	ce 0f       	add	r28, r30
    2c52:	d1 1d       	adc	r29, r1
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	ed 01       	movw	r28, r26
    2c60:	08 95       	ret

00002c62 <itoa>:
    2c62:	fb 01       	movw	r30, r22
    2c64:	9f 01       	movw	r18, r30
    2c66:	e8 94       	clt
    2c68:	42 30       	cpi	r20, 0x02	; 2
    2c6a:	c4 f0       	brlt	.+48     	; 0x2c9c <itoa+0x3a>
    2c6c:	45 32       	cpi	r20, 0x25	; 37
    2c6e:	b4 f4       	brge	.+44     	; 0x2c9c <itoa+0x3a>
    2c70:	4a 30       	cpi	r20, 0x0A	; 10
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <itoa+0x1c>
    2c74:	97 fb       	bst	r25, 7
    2c76:	1e f4       	brtc	.+6      	; 0x2c7e <itoa+0x1c>
    2c78:	90 95       	com	r25
    2c7a:	81 95       	neg	r24
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	64 2f       	mov	r22, r20
    2c80:	77 27       	eor	r23, r23
    2c82:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodhi4>
    2c86:	80 5d       	subi	r24, 0xD0	; 208
    2c88:	8a 33       	cpi	r24, 0x3A	; 58
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <itoa+0x2c>
    2c8c:	89 5d       	subi	r24, 0xD9	; 217
    2c8e:	81 93       	st	Z+, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	a1 f7       	brne	.-24     	; 0x2c7e <itoa+0x1c>
    2c96:	16 f4       	brtc	.+4      	; 0x2c9c <itoa+0x3a>
    2c98:	5d e2       	ldi	r21, 0x2D	; 45
    2c9a:	51 93       	st	Z+, r21
    2c9c:	10 82       	st	Z, r1
    2c9e:	c9 01       	movw	r24, r18
    2ca0:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <strrev>

00002ca4 <strrev>:
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	67 2f       	mov	r22, r23
    2caa:	71 91       	ld	r23, Z+
    2cac:	77 23       	and	r23, r23
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <strrev+0x4>
    2cb0:	32 97       	sbiw	r30, 0x02	; 2
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <strrev+0x18>
    2cb4:	7c 91       	ld	r23, X
    2cb6:	6d 93       	st	X+, r22
    2cb8:	70 83       	st	Z, r23
    2cba:	62 91       	ld	r22, -Z
    2cbc:	ae 17       	cp	r26, r30
    2cbe:	bf 07       	cpc	r27, r31
    2cc0:	c8 f3       	brcs	.-14     	; 0x2cb4 <strrev+0x10>
    2cc2:	08 95       	ret

00002cc4 <__udivmodhi4>:
    2cc4:	aa 1b       	sub	r26, r26
    2cc6:	bb 1b       	sub	r27, r27
    2cc8:	51 e1       	ldi	r21, 0x11	; 17
    2cca:	07 c0       	rjmp	.+14     	; 0x2cda <__udivmodhi4_ep>

00002ccc <__udivmodhi4_loop>:
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	bb 1f       	adc	r27, r27
    2cd0:	a6 17       	cp	r26, r22
    2cd2:	b7 07       	cpc	r27, r23
    2cd4:	10 f0       	brcs	.+4      	; 0x2cda <__udivmodhi4_ep>
    2cd6:	a6 1b       	sub	r26, r22
    2cd8:	b7 0b       	sbc	r27, r23

00002cda <__udivmodhi4_ep>:
    2cda:	88 1f       	adc	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	5a 95       	dec	r21
    2ce0:	a9 f7       	brne	.-22     	; 0x2ccc <__udivmodhi4_loop>
    2ce2:	80 95       	com	r24
    2ce4:	90 95       	com	r25
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	08 95       	ret

00002cec <_exit>:
    2cec:	f8 94       	cli

00002cee <__stop_program>:
    2cee:	ff cf       	rjmp	.-2      	; 0x2cee <__stop_program>
